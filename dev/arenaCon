--                          +-------+
-- X-Connection (X-1/Y) [--<| ROOM  |>--} X-Connection (X/Y)
--                          | (X/Y) |
--                          +-------+
--                            \/ Y-Connection X/Y
--

-- Reset area from -4 20 -21 to 4 20 -13
function reset()
	for x=-3,7 do
		for z=-20,-9 do
			commands.execAsync("/setblock "..x.." 20 "..z.." air")
		end
	end
	
	-- Redraw stone "rooms"
	for x=1,5 do
		for z=1,5 do
			commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-21+z*2).." stone")
		end
	end
end

function setDirBlock(x,z,dir,checked,bossChecked,endChecked)
	if(x==1 and y==1)then
		commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-21+z*2).." wool 5")
	elseif(checked)then
		commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-21+z*2).." wool 1")
		if(bossChecked)then
			commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-21+z*2).." wool 2")
		elseif(endChecked)then
			commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-21+z*2).." wool 6")
		end
	else
		local dirNum = 0
		if(dir=="-y")then dirNum = 3 end
		if(dir=="+y")then dirNum = 2 end
		if(dir=="-x")then dirNum = 5 end
		if(dir=="+x")then dirNum = 4 end
 
		commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-21+z*2).." piston "..dirNum)
	end
end

function removeXConnection(x,y)
 commands.execAsync("/setblock "..(-3+x*2).." 20 "..(-21+y*2).." air")
end

function removeYConnection(x,y)
 commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-20+y*2).." air")
end


function addXConnection(x,y)
 commands.execAsync("/setblock "..(-3+x*2).." 20 "..(-21+y*2).." wool")
end

function addYConnection(x,y)
 commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-20+y*2).." wool")
end

function addRandomXConnection(x,y)
 commands.execAsync("/setblock "..(-3+x*2).." 20 "..(-21+y*2).." wool 8")
end

function addRandomYConnection(x,y)
 commands.execAsync("/setblock "..(-4+x*2).." 20 "..(-20+y*2).." wool 8")
end

reset()
addRandomXConnection(3,3)
addRandomXConnection(2,3)
addRandomYConnection(3,3)
addRandomYConnection(3,2)


local start = {1,1}
local lookingAt = start

local points = {}
points[lookingAt[1]] = {}
points[lookingAt[1]][lookingAt[2]] = {["back"] = "-x",["backCheck"] = false,["bossCheck"] = false,["endCheck"] = false}

local done = false

function canConnectTo(x,y)
 -- Check if coordinates are valid
 if(x>=1 and x<=5 and y>=1 and y<=5)then
  -- Check if space is not already taken
  if((points[x])==nil)then
   return true
  else
   if((points[x][y])==nil)then
    return true
   else
    return false
   end
  end
  return true
 else
  return false
 end
end

sleep(2)

while not done do
 local dirs = {}
 local x = lookingAt[1]
 local y = lookingAt[2]
  
 if(canConnectTo(x+1,y))then table.insert(dirs,"+x") end
 if(canConnectTo(x-1,y))then table.insert(dirs,"-x") end
 if(canConnectTo(x,y+1))then table.insert(dirs,"+y") end
 if(canConnectTo(x,y-1))then table.insert(dirs,"-y") end
 
 if(x==3 and y==3)then points[x][y]["bossCheck"] = true end
 if(x==3 and y==1)then points[x][y]["endCheck"] = true end
 
 -- Go further
 if(#dirs>0)then
  local choosenDir = math.random(#dirs)
  local backdir = dirs[choosenDir]
  
  -- Encourage non-straight behaviour
  if(points[x][y]["back"]==backdir and math.random(3)>1 and #dirs>1)then
   choosenDir = math.random(#dirs)
   backdir = dirs[choosenDir]
  end
  if(#dirs>1 and math.random(3)==1)then
   local anotherDir = math.random(#dirs)
   if(anotherDir ~= choosenDir)then
    if(dirs[anotherDir] == "+x")then addRandomXConnection(x,y) end
    if(dirs[anotherDir] == "-x")then addRandomXConnection(x-1,y) end
    if(dirs[anotherDir] == "+y")then addRandomYConnection(x,y) end
    if(dirs[anotherDir] == "-y")then addRandomYConnection(x,y-1) end
   end
  end
  local newpoint = {}
  if(backdir == "+x")then newpoint = {x+1,y} addXConnection(x,y) end
  if(backdir == "-x")then newpoint = {x-1,y} addXConnection(x-1,y) end
  if(backdir == "+y")then newpoint = {x,y+1} addYConnection(x,y) end
  if(backdir == "-y")then newpoint = {x,y-1} addYConnection(x,y-1) end

  
  if(not points[newpoint[1]])then points[newpoint[1]] = {} end
  
  points[newpoint[1]][newpoint[2]] = {["back"] = backdir,["backCheck"] = false,["bossCheck"] = false}
  
  lookingAt = newpoint
 else -- Go back
  if(x == start[1] and y == start[2])then -- Check if back at start
   points[x][y]["backCheck"] = true
   done = true
  else
   points[x][y]["backCheck"] = true
   local backdir = points[x][y]["back"]
   if(backdir == "+x")then lookingAt = {x-1,y} end
   if(backdir == "-x")then lookingAt = {x+1,y} end
   if(backdir == "+y")then lookingAt = {x,y-1} end
   if(backdir == "-y")then lookingAt = {x,y+1} end
   points[lookingAt[1]][lookingAt[2]]["bossCheck"] = points[lookingAt[1]][lookingAt[2]]["bossCheck"] or points[x][y]["bossCheck"]
   points[lookingAt[1]][lookingAt[2]]["endCheck"] = points[lookingAt[1]][lookingAt[2]]["endCheck"] or points[x][y]["endCheck"]
  end
 end
 setDirBlock(x,y,points[x][y]["back"],points[x][y]["backCheck"],points[x][y]["bossCheck"],points[x][y]["endCheck"])
 sleep(0.2)
end


