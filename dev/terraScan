-- Load api stuff
os.loadAPI(":dungeon/dcore/apis/dcore")
dcore.requireAPI("generation")
if(not generation)then
	error("Generation not loaded!",1)
end
generation.newRoom(0,2,0)
term.clear()

local screenW,screenH = term.getSize()

-- includes all scanned data
local scanData = {}
-- scanData[x][z][y] in mc coords
 -- displays biome at that place

local focusX,focusY = 0,0

biome_color = {colors.lightGray,colors.red,colors.blue,colors.yellow,colors.lime,colors.gray,colors.green,colors.orange,colors.lightBlue,colors.cyan,colors.white}
heightmap_color = {colors.blue,colors.lightBlue,colors.yellow,colors.lime,colors.green,colors.lightGray,colors.white,colors.white,colors.white,colors.white,colors.white,colors.white}

-- Settings:

-- Color Display
-- true = shows biome color
-- false = shows height map color
local showBiomeColor = true

-- Draw Height Number
local showHeightNumber = false

-- Focus Height
-- Shows the height to be focused on
-- if >0, shows levels below that, but not levels above
-- if <0, shows only this level
-- if =0, shows all levels, like looking from above
local focusHeight = 0

local changedCam = false


function ScanPillar(x,y)
	-- create table if not existing
	if(scanData[x]==nil)then scanData[x] = {} end
	if(scanData[x][y]==nil)then scanData[x][y] = {} end
	-- load data into table
	local height = generation.getHeightByPosition(x,y)+1
	scanData[x][y]["height"] = height
	for i=1,height do
		scanData[x][y][i] = generation.getBiomeByPosition(x,y,i)
	end
end

local screenData = {}

function updateMap()
	for x=focusX,(screenW+focusX-4) do
		for y=focusY,(screenH+focusY-4) do
			if(scanData[x] == nil)then ScanPillar(x,y) end
			if(scanData[x][y] == nil)then ScanPillar(x,y) end
			-- Adapt to screen view height (focusHeight)
			local scan_height = math.abs(focusHeight)
			-- Display lower levels 
			if(scanData[x][y][scan_height]==nil and focusHeight==0)then
				scan_height = scanData[x][y]["height"]
			end
			-- Fill empty spaces
			-- Draw
			term.setCursorPos(2+x-focusX,2+y-focusY)
			if(scanData[x][y][scan_height]~=nil)then
				if(showBiomeColor)then
					term.setBackgroundColor(biome_color[scanData[x][y][scan_height]] or colors.black)
				else
					term.setBackgroundColor(heightmap_color[scan_height] or colors.white)
				end
			else
				if(focusHeight>0 and showBiomeColor)then
					local color = (biome_color[generation.getBiomeByPosition(x,y,focusHeight)] or colors.black)
					term.setBackgroundColor(color)
				else
					term.setBackgroundColor(colors.black)
				end
			end
			if(showHeightNumber)then
				write(scan_height)
			else
				write(" ")
			end
		end
	end
	term.setBackgroundColor(colors.black)
end

function updateUI()
	term.setCursorPos(20,1)
	write("Layer: "..focusHeight.."  ")
	term.setCursorPos(1,screenH-1)
	if(focusHeight==0)then
		write("Showing all layers from above            ")
	elseif(focusHeight<0)then
		write("Showing all rooms generated on that layer")
	else
		write("Showing biome type of rooms on that layer")
	end
	
	term.setCursorPos(1,screenH)
	if(showBiomeColor)then
		write("[B] <Biome> Height map  ")
	else
		write("[B] Biome <Height> map ")
	end
	term.setCursorPos(30,screenH)
	write("[H] Show Height")
	updateMap()
end

function UITracker()
	while true do
		if(changedCam)then
			updateUI()
			changedCam = false
		end
		sleep(.05)
	end
end

local printWord = {"p","r","i","n","t"}
function inputTracker()
	local printTracker = 1
	while true do
		local event, key = os.pullEvent("key")
		term.setCursorPos(1,1)
		write(keys.getName(key))
		
		if(keys.getName(key) == printWord[printTracker])then
			printTracker = printTracker + 1
			if(printTracker==6)then
				term.setCursorPos(10,1)
				write("Printing Map in 3D...")
				sleep(1)
				term.clearLine()
				updateUI()
			end
		else
			printTracker = 1
		end
		
		if(keys.getName( key ) == "right" or keys.getName( key ) == "d")then
			focusX = focusX + 1
			changedCam = true
		elseif(keys.getName( key ) == "left" or keys.getName( key ) == "a")then
			focusX = focusX - 1
			changedCam = true
		elseif(keys.getName( key ) == "down" or keys.getName( key ) == "s")then
			focusY = focusY + 1
			changedCam = true
		elseif(keys.getName( key ) == "up" or keys.getName( key ) == "w")then
			focusY = focusY - 1
			changedCam = true
		elseif(keys.getName( key ) == "q")then
			focusHeight = focusHeight + 1
			changedCam = true
		elseif(keys.getName( key ) == "y" or keys.getName( key ) == "z")then
			focusHeight = focusHeight - 1
			changedCam = true
		elseif(keys.getName( key ) == "l")then
			focusHeight = 0
			changedCam = true
		elseif(keys.getName( key ) == "b")then
			showBiomeColor = not showBiomeColor
			changedCam = true
		elseif(keys.getName( key ) == "h")then
			showHeightNumber = not showHeightNumber
			changedCam = true
		end
		term.setCursorPos(1,1)
		write("                ")
	end
end

function init()
	term.setCursorPos(1,1)
	write("Loading...")
	for x=focusX,(screenW+focusX-4) do
		for y=focusY,(screenH+focusY-4) do
			if(scanData[x] == nil)then ScanPillar(x,y) end
			if(scanData[x][y] == nil)then ScanPillar(x,y) end
		end
		sleep(.05)
		term.setCursorPos(10,1)
		write(math.floor(x/(screenW-4)*100).."%  ")
	end
	term.setCursorPos(1,1)
	write("Loading...done!        ")
	sleep(.05)
end

init()
updateUI()
parallel.waitForAny(inputTracker,UITracker)



print("")
--[[


 term.clear()
 for y=1,sy do
  for x=1,sx do
   local h = generation.getHeightByPosition(x,y)+1
 	local thisbiome = 0
 	local readheight = 0
	
    while true do
	 if(h<scan_height)then
	  thisbiome = VORONOIgetBiomeByPosition(x,y,h)
	  readheight = h
	 else
	  thisbiome = VORONOIgetBiomeByPosition(x,y,scan_height)
	  readheight = scan_height
	 end
	 if(thisbiome~=0)then 
	  break
	 end
	 scan_height = scan_height - 1
	end
	
    if(VORONOIgetBiomeByPosition(x,y,4)==10)then
	 thisbiome = 10
	 readheight = PERLINgetRuinHeight(x,y)+3
	else
	 readheight = PERLINgetHeightByPosition(x,y)+1
	end
	
    term.setCursorPos(x,y)
	if(show_heightmap)then
	 term.setBackgroundColor(heightmap_color[readheight])
	else
	 if(thisbiome~=0)then
      term.setBackgroundColor(biome_color[thisbiome])
	 end
    end
	term.setTextColor(colors.black)
	
	if(thisbiome~=0)then if(show_heightnumber)then write(readheight) else write(" ") end end
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	hcounter[h] = (hcounter[h] or 0)+1
   end
  end
 end
 sleep(0.05)
end

term.setTextColor(colors.black)
for i=1,#centers do
 if(centers[i][1]>0 and centers[i][1]<=sx and centers[i][2]>0 and centers[i][2]<=sy)then
  term.setBackgroundColor(centers[i][3])

  term.setCursorPos(centers[i][1],centers[i][2])
  write("+")
  term.setBackgroundColor(colors.black)
 end
end

term.setTextColor(colors.white)
term.setBackgroundColor(colors.black)
term.setCursorPos(1,1)
local total = 0
for i=1,math.floor(height_max)+2 do
 if(hcounter[i]~=nil)then
  total = total + hcounter[i]
  write("/"..i..":"..hcounter[i].."/")
 end
end
write(total)
term.setTextColor(colors.white)
term.setBackgroundColor(colors.black)
end


ScanArea(10)

local progress = 0
local scany = 0
while true do
 show_heightnumber = true
 event, side, xPos, yPos = os.pullEvent("monitor_touch")
 seed = math.random(10000)
 ScanArea(10)
 event, side, xPos, yPos = os.pullEvent("monitor_touch")
 show_heightnumber = false
 ScanArea(10)
 
 
 progress = progress + 1
 if(progress>6)then progress = 1 end
 scany = progress
 if(progress==5)then scany = 5 end
 if(progress==6)then show_heightmap = true else show_heightmap = false end
 if(progress<5)then show_heightnumber = true else show_heightnumber = false end
 ScanArea(scany)
end
]]