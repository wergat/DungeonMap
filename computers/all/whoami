print("Running basic OS detection.")
print("Press and hold any key to cancle.")

-- BIOS informations
-- Can be used in case of emergency
sleep(.5)
os.startTimer(.5)
local tEvent = {os.pullEvent()}
if(tEvent[1] == "key")then
	printError("Booting process cancled")
	sleep(.3)
	for i=1,10 do
		write(".")
		sleep(.05)
	end
	error("Proceeding to fall back native OS.")
end
-- ///

local tArgs = {...}
local init = false
if(tArgs[1])then
	print("This is the first run, initializing!")
	sleep(1)
	print(fs.exists("dungeon/dcore/apis/dcore"))
	print(fs.exists("dungeon/dcore/apis/github"))
	print(fs.exists("dungeon/dcore/apis/config"))
	sleep(10)
	if(not (fs.exists("dungeon/dcore/apis/dcore") and fs.exists("dungeon/dcore/apis/github") and fs.exists("dungeon/dcore/apis/config")))then
		shell.run("update","https://api.github.com/repos/wergat/DungeonMap/contents/dcore/apis/dcore","https://api.github.com/repos/wergat/DungeonMap/contents/dcore/apis/github","https://api.github.com/repos/wergat/DungeonMap/contents/dcore/apis/config")
		print("Important APIs not found, loading them now.")
		print("Downloaded essential APIs, rebooting once more!")
		sleep(5)
		os.reboot()
	end
	print("Initialization complete.")
	init = true
	local open = fs.open(":startup","w")
	open.write("shell.run(\"dungeon/computers/all/whoami\")")
	open.close()
end


-- Loading DCORE
os.loadAPI(":dungeon/dcore/apis/dcore")
if(not github)then dcore.requireAPI("github") end

-- Checks if the object is supposed to run
-- Object access some data like
-- self.blockBelow
local self = {computer = {}}
local x,y,z = commands.getBlockPosition()
self.computer.isColor = term.isColor()
self.computer.isMobile = ((pocket) ~= nil)
self.computer.isCommand = ((commands) ~= nil)
self.computer.isTurtle = ((turtle) ~= nil)
self.computer.position = {["x"] = x,["y"] = y,["z"] = z}
self.computer.blockBelow = commands.getBlockInfo(x,y-1,z)
self.computer.id = os.getComputerID()
self.computer.label = os.getComputerLabel()
self.tArgs = tArgs
self.init = init
self.updater = github.newUpdater()

local function displayError(p,e)
	dcore.print_log("error","[EVENT][whoami]["..l[i].."] While loading "..p.."; "..e)
	if(firstError)then
		if(term.isColor())then term.setTextColor(colors.red) end
		print("Error found while loading api files, check logs/error for more informations! "..e)
		term.setTextColor(colors.white)
		firstError = false
	end
end

local tEnv = setmetatable({self = self},{__index = _ENV})
function checkWhoAmI(object)
	local files = {}
	local mods = fs.list(config.DIR_MODS)
	-- Find all whoami files and put them in a list
	for modi=1,#mods do
		if(fs.exists(config.DIR_MODS.."/"..mods[modi].."/event/whoami"))then
			files[#files] = config.DIR_MODS.."/"..mods[modi].."/event/whoami"
		end		
	end
	-- Go though the list with all the whoami files
	for i=1,#files do
		local fnAPI, err = loadfile(files[i])
		if fnAPI then
			setfenv(fnAPI,tEnv)
			local ok, err = pcall(fnAPI)
			if not ok then
				displayError(files[i],err)
			end
		else
			displayError(files[i],err)
		end
	end	
end


-- Main Computer
if(self.computer.blockBelow.name == "minecraft:quartz_block")then
	print("Identified as Dev Computer")
	if(init)then
		print("Updating")
		sleep(1)
		self.updater:downloadFromDir("")
		sleep(1)
		os.reboot()
	else
		print("Running main function")
		shell.run("dungeon/computers/dev/main")
	end
end


-- Settings monitor
if(self.computer.blockBelow.name == "minecraft:wool")then
	self.updater:downloadFromDir("/dcore")
	self.updater:downloadFromDir("/computers/option")
	self.updater:downloadFromDir("/computers/all")
	self.updater:downloadFromDir("/mods")
	if(self.init)then
		sleep(1)
		os.reboot()
	end
	local side = nil
	for k,v in pairs(peripheral.getNames()) do
		if(peripheral.getType(v) == "monitor")then
			side = v
		end
	end
	if(side)then
		shell.run("monitor "..side.." dungeon/computers/option/main")
	end
end

-- cmd_slave
if(self.computer.blockBelow.name == "minecraft:iron_block")then
	self.updater:downloadFromDir("/dcore/apis/github")
	self.updater:downloadFromDir("/computers/all")
	self.updater:downloadFromDir("/computers/cmd_slave")
	self.updater:downloadFromDir("/dcore/apis/dcore")
	shell.run("dungeon/computers/cmd_slave/main")
end
