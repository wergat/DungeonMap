local tArgs = {...}

print("Updating")
if(not dcore)then os.loadAPI(":dungeon/dcore/apis/dcore") end
JSON = nil
if(fs.exists(":dungeon/dcore/apis/JSON.lua"))then
	JSON = assert(loadfile ":dungeon/dcore/apis/JSON.lua")()
	print("Native JSON-API found!")
else
	printError("Could not find JSON parsing file; need to download a new one! Suspecting a fresh install or corrupted API directory!")
end

-- /// Engine Check
-- Check if HTTP API is enabled
if not http then
	printError("No HTTP! The updater requires connection to the internet to update the files! Please provide an internet connection or enable the HTTP API for ComputerCraft in the mod config!")
	error()
end
-- Check if there is an internet connection and if github is whitlisted
if not http.get("https://api.github.com/rate_limit") then
	if not http.get("http://pastebin.com/") then
		printError("We need an internet connection to update our files!")
	else
		printError("If you have internet, please check your Computercraft mod config and allow api.github.com to be used, so we are allowed to download files!")
	end
	error()
end
print("Connection: checked!")

if(not JSON)then
	print("JSON Parser not found. Downloading a new one!")
	local downloadedJSONFile = http.get("http://pastebin.com/raw/ALx63iW4").readAll()
	if(not downloadedJSONFile)then error("could not download the new JSON Parser - it is required for the updater!") end
	local newJSONFile = fs.open(":dungeon/dcore/apis/JSON.lua","w")
	newJSONFile.writeLine(downloadedJSONFile)
	newJSONFile.close()
	JSON = assert(loadfile ":dungeon/dcore/apis/JSON.lua")()
	if(not JSON)then error("Could not write the new JSON Parser into a file - it is required for the updater!") end
end
print("JSON parser actually exists!")
local logfile = fs.open(":dungeon/logs/updater","w")

function writeToLog(text)
	logfile.writeLine(text)
	logfile.flush()
end
writeToLog("~~ Using computers/all/update to download files ~~")

if(dcore)then dcore.requireAPI("github") else printError("DCORE API WAS NOT FOUND!") end
if(not github)then
	printError("Github API is not installed, using http as alternative to install it.")
	github = {get = http.get}
else
	if(github.setDefaultKey)then
		print("Loading Downloading Capacity Increaser Fix")
		writeToLog("Loading Downloading Capacity Increaser Fix")
		local key = github.pickWorkingKey()
		if(key)then
			github.setDefaultKey(key)
			writeToLog("A key was found, here it is: "..key)
		else
			writeToLog("No new key was found.")
		end
	else
		writeToLog("Failed Downloading Capacity Increaser Fix, outdated Github API")
	end
end

local files_updated = 0
local files_not_updated = 0

if(not cancle)then
	print("Finished updating!")
	print("" .. files_updated .. " files have been updated.")
	print("Found "..files_not_updated.." file(s) not to be worthy for updating!")
else
	print("Updating cancelled due to API limitations!")
end


writeToLog("Log file for the updater!")
writeToLog("~~ Using computers/all/update to download files ~~")
local startRemaining = (JSON:decode(http.get("https://api.github.com/rate_limit").readAll())["resources"]["core"]["remaining"])
writeToLog("API Calls remaining: "..(startRemaining))
writeToLog("==========================================")

local SHACodes = {}
if fs.exists(":dungeon/hashes") then
	local open = fs.open(":dungeon/hashes", "r")
	SHACodes = open.readAll()
	open.close()
	SHACodes = textutils.unserialize(SHACodes)
end




local function getCurrentTimeAsUNIXTimespamp()
	return http.get("http://currentmillis.com/time/seconds-since-unix-epoch.php").readAll()
end

local cancle = false

-- DOWNLOAD FUNCTION
local function downloadFromDir(url)
	if(cancle)then return end
	local x = github.get(url)
	
	-- Checking for the API limitations
	if x then
		x = x.readAll()
	else
		writeToLog("Could not receive data from github. Checking that.")
		local currentTime = getCurrentTimeAsUNIXTimespamp()
		local githubRateTable = JSON:decode(github.get("https://api.github.com/rate_limit").readAll())
		local githubRateLimit = githubRateTable["resources"]["core"]["reset"]
		local waitTime = githubRateLimit - currentTime
		local mins = math.floor(waitTime/60)
		local secs = waitTime%60
		printError(" > Oops! It looks like you've installed the DungeonMap files too much recently. Try again in about " .. mins .. "m:" .. secs .. "s!")
		print("")
		writeToLog("Oops! It looks like you've installed the DungeonMap files too much recently. Try again in about " .. mins .. "m:" .. secs .. "s!")
		cancle = true
		return
	end
	
	x = JSON:decode(x)
	writeToLog("Found #"..tonumber(#x).." files inside "..url)
	for i = 1, #x do
		local f = x[i]
		local path = f["path"]
		if (f["sha"] == SHACodes[path] and f["type"] ~= "dir") then
			files_not_updated = files_not_updated + 1
			writeToLog(" x Not updated: "..path)
		elseif f["type"] == "dir" then
			print("Scanning directory: " .. path)
			writeToLog("Downloading directory: " .. path)
			SHACodes[path] = f["sha"]
			downloadFromDir(f["url"])
		else
			--for k,v in pairs(BLACKLIST) do if(v==path)then return end end
			print(" > Downloading file: " .. path)
			writeToLog(" > Downloading file: " .. path .. " URL: "..(f["download_url"] or "ERROR"))
			local handle = github.get(f["download_url"])
			if(handle)then
				local xt = handle.readAll()
				local open = fs.open("dungeon/" .. path, "w")
				open.write(xt)
				open.close()
			else
				writeToLog("PREVIOS HANDLE WAS INVALID! FILE COULD NOT BE LOADED! " .. path .. " URL: "..(f["download_url"] or "ERROR"))
			end
			SHACodes[path] = f["sha"]
			files_updated = files_updated + 1
		end
	end
end

for k,v in pairs(tArgs) do
	downloadFromDir(v)
end

print("Updating Hashes")
local open = fs.open(":dungeon/hashes", "w")
open.write(textutils.serialize(SHACodes))
open.close()

local endingRemaining = JSON:decode(http.get("https://api.github.com/rate_limit").readAll())["resources"]["core"]["remaining"]
writeToLog("==========================================")
writeToLog("API Calls remaining: "..endingRemaining)
writeToLog("API Calls used during update: "..(startRemaining-endingRemaining))
logfile.close()