os.loadAPI(":dungeon/apis/dcore")
dcore.requireAPI("advitem")
dcore.requireAPI("potion")

-- 

local chest_types = {" "," Equipment "," Supply "," Food "," Potion "}

local item_pool = {}
item_pool[1] = { -- Normal
 {["id"] = 263,["value"] = 3,["max"] = 10}, -- apple
 {["id"] = 260,["value"] = 1,["max"] = 18},-- coal
 {["id"] = 297,["value"] = 4,["max"] = 6}, -- bread
 {["id"] = 363,["value"] = 6,["max"] = 10},  -- raw steak
 {["id"] = 364,["value"] = 25,["max"] = 7}, -- steak
 {["id"] = 280,["value"] = 2,["max"] = 13}, -- stick
 {["id"] = 392,["value"] = 4,["max"] = 10}, -- potato
 {["id"] = 393,["value"] = 8,["max"] = 6}, -- cooked ^
 {["id"] = 296,["value"] = 2,["max"] = 12}, -- wheat
 {["id"] = 289,["value"] = 7,["max"] = 9}, -- gunpowder
 {["id"] = 334,["value"] = 12,["max"] = 10}, -- lether
 {["id"] = 287,["value"] = 8,["max"] = 7}, -- string
 {["id"] = 318,["value"] = 5,["max"] = 2}, -- flint
 {["id"] = 288,["value"] = 9,["max"] = 4}, -- fether
 {["id"] = 348,["value"] = 25,["max"] = 10}, -- glowstone
 {["id"] = 371,["value"] = 20,["max"] = 24}, -- golden nuggets
 {["id"] = 266,["value"] = 180,["max"] = 12}, -- golden ingot
 {["id"] = 41,["value"] = 1620,["max"] = 6}, -- golden block
 {["id"] = 264,["value"] = 14580,["max"] = 3}, -- diamonds
 {["id"] = 384,["value"] = 35,["max"] = 30}, -- bottle de xp
 {["id"] = 352,["value"] = 10,["max"] = 14}, -- bone
 {["id"] = 50,["value"] = 3,["max"] = 20}, -- torch
 {["id"] = 263,["value"] = 3,["max"] = 10}, -- apple
 {["id"] = 393,["value"] = 8,["max"] = 6}, -- cooked potato
 {["id"] = 364,["value"] = 25,["max"] = 7}, -- steak
  --{["id"] = ,["value"] = ,["max"] = },
}
item_pool[2] = { -- Equipment
 {["id"] = 260,["value"] = 1,["max"] = 18},-- coal
 {["id"] = 371,["value"] = 20,["max"] = 24}, -- golden nuggets
 {["id"] = 266,["value"] = 180,["max"] = 12}, -- golden ingot
 {["id"] = 41,["value"] = 1620,["max"] = 6}, -- golden block
 {["id"] = 264,["value"] = 14580,["max"] = 3}, -- diamonds
  --{["id"] = ,["value"] = ,["max"] = },
}
item_pool[3] = { -- Supply
 {["id"] = 260,["value"] = 1,["max"] = 18},-- coal
 {["id"] = 280,["value"] = 2,["max"] = 13}, -- stick
 {["id"] = 289,["value"] = 7,["max"] = 9}, -- gunpowder
 {["id"] = 334,["value"] = 12,["max"] = 10}, -- leather
 {["id"] = 287,["value"] = 8,["max"] = 7}, -- string
 {["id"] = 318,["value"] = 5,["max"] = 2}, -- flint
 {["id"] = 288,["value"] = 9,["max"] = 4}, -- feather
 {["id"] = 348,["value"] = 25,["max"] = 10}, -- glowstone
 {["id"] = 266,["value"] = 180,["max"] = 12}, -- golden ingot
 {["id"] = 41,["value"] = 1620,["max"] = 6}, -- golden block
 {["id"] = 264,["value"] = 14580,["max"] = 3}, -- diamonds
 {["id"] = 384,["value"] = 35,["max"] = 30}, -- bottle de xp
 {["id"] = 352,["value"] = 10,["max"] = 14}, -- bone
 {["id"] = 50,["value"] = 3,["max"] = 13}, -- torch
 {["id"] = 50,["value"] = 2,["max"] = 5}, -- torch
 {["id"] = 50,["value"] = 1,["max"] = 3}, -- torch
 {["id"] = 338,["value"] = 3,["max"] = 20}, -- sugar cane
  --{["id"] = ,["value"] = ,["max"] = },
}
item_pool[4] = { -- Food
 {["id"] = 263,["value"] = 3,["max"] = 10}, -- apple
 {["id"] = 297,["value"] = 4,["max"] = 6}, -- bread
 {["id"] = 363,["value"] = 6,["max"] = 10},  -- raw steak
 {["id"] = 364,["value"] = 25,["max"] = 7}, -- steak
 {["id"] = 392,["value"] = 4,["max"] = 10}, -- potato
 {["id"] = 393,["value"] = 8,["max"] = 6}, -- cooked ^
 {["id"] = 296,["value"] = 2,["max"] = 12}, -- wheat
 {["id"] = 391,["value"] = 4,["max"] = 5}, -- carrot
 {["id"] = 266,["value"] = 180,["max"] = 12}, -- golden ingot
 {["id"] = 41,["value"] = 1620,["max"] = 6}, -- golden block
 {["id"] = 264,["value"] = 14580,["max"] = 3}, -- diamonds
 {["id"] = 263,["value"] = 2,["max"] = 2}, -- apple
 {["id"] = 393,["value"] = 8,["max"] = 6}, -- cooked potato
 {["id"] = 364,["value"] = 25,["max"] = 7}, -- steak
 {["id"] = 365,["value"] = 4,["max"] = 10}, -- raw chicken
 {["id"] = 366,["value"] = 7,["max"] = 7}, -- cooked chicken
 {["id"] = 349,["value"] = 2,["max"] = 7}, -- raw fish
 {["id"] = 350,["value"] = 5,["max"] = 7}, -- cooked fish
 {["id"] = 295,["value"] = 3,["max"] = 3}, -- seeds wheat
 {["id"] = 361,["value"] = 6,["max"] = 3}, -- seeds pumpkin
 {["id"] = 362,["value"] = 6,["max"] = 3}, -- seeds melon
 {["id"] = 353,["value"] = 8,["max"] = 17}, -- sugar
 {["id"] = 357,["value"] = 1,["max"] = 5}, -- cookie
  --{["id"] = ,["value"] = ,["max"] = },
}
--item_pool[5] = {
-- {["id"] = 50,["value"] = 3,["max"] = 13}, -- torch 
--}



function getChestRarity()
 local chance = {0.25,0.3,0.35,0.4,0.4,0.4}
 local q = 1
 while((math.random(20)/20)<=chance[q] and q<#chance)do q = q + 1 end
 return q
end

function firstToUpper(str) return (str:gsub("^%l", string.upper)) end

function getChestData(_startDifficulty,_chestType)
	-- Chest rarity, like unusual or rare
	local chestRarity = chest.getChestRarity()
	-- Item power level, each item costs a little bit of power
	local remainingStoragePower = _startDifficulty*(6+3*chestRarity+_chestType)
	local dataTable = {}
	dataTable["Items"] = {}

	local loot = {}
	local slots = {}
	local items_choosen = 0
	loot["item"] = {}

	local timeout = 0
	
	-- As long as there is item power
	while remainingStoragePower>0 do
		if(timeout>10)then
			remainingStoragePower = remainingStoragePower - 5
			timeout = 0
		end
		
		local itemIndex = math.random(#item_pool[_chestType])
		local itemPoolData = item_pool[_chestType][itemIndex]
		
		-- Just in case something gets wrong and we have to re-run this loop
		local validItem = true
		
		-- Prevent timeouts in this while clock
		if(type(itemPoolData)~="function")then
			while(itemPoolData.value > remainingStoragePower)do
				itemIndex = math.random(#item_pool[_chestType])
				itemPoolData = item_pool[_chestType][itemIndex]
				if(type(itemPoolData)=="function")then
					break
				end
				timeout = timeout + 1
				if(timeout>10)then
					remainingStoragePower = remainingStoragePower - 5
					timeout = 0
					validItem = false
					break
				end
			end
		end

		local isFunction = (type(itemPoolData)=="function")
		local maxCount = 1
		local itemCount = 1
		
		if(not isFunction)then
			-- Pre-defined maximum amount of items we can spawn at once
			local maxitems = (itemPoolData["max"] or 1)
			-- Maximum items we can summon at once with our storage power
			local maxcapacity = math.floor(remainingStoragePower/itemPoolData["value"])
			-- Summon as many items as we are allowed to
			maxCount = math.min(maxitems,maxcapacity)
			
			while (itemCount<maxCount and math.random(20)>2) do
				itemCount = itemCount + 1
			end
			
			-- "Pay" for the item(s)
			remainingStoragePower = remainingStoragePower - itemPoolData["value"]*itemCount
			-- Add the item(s) to the chest
			loot[itemPoolData["id"]] = (loot[itemPoolData["id"]] or 0) + itemCount
			
			-- Reset Timeout
			timeout = 0
		else
			print("#3")
			-- Get data from custom function
			local customItemData = itemPoolData(remainingStoragePower)
			
			-- Approve inputs
			-- Ignore errors if the function returns false, then it knows there will no item spawn
			if(customItemData~=false)then
				if(not customItemData)then print("cutomItemData needs to be table!") validItem = false end
				if(not type(customItemData)=="table")then print("cutomItemData needs to be table!") validItem = false end
				if(not customItemData["item"])then print("cutomItemData needs to have a item table with data inside it!") validItem = false end
			else
				validItem = false
			end
			print("#4")
			
			if(validItem)then
				local powerCost = tonumber(customItemData["powerCost"] or 0) or 0
				print("#5 ["..customItemData["powerCost"].."]")
				-- Check if we can afford the item(s) we just generated
				if(powerCost<=remainingStoragePower)then
					-- Process output data
					print("#6 ("..remainingStoragePower..")")
					-- Item count
					if(customItemData["setItemCount"])then
						itemCount = customItemData["setItemCount"]
						maxCount = customItemData["setItemCount"]
					elseif(customItemData["maxItemCount"])then
						-- Pre-defined maximum amount of items we can spawn at once
						local maxitems = (tonumber(ustomItemData["maxItemCount"] or 1) or 1)
						-- Maximum items we can summon at once with our storage power
						local maxcapacity = math.floor(remainingStoragePower/powerCost)
						-- maxCount as many items as we are allowed to
						itemCount = math.min(maxitems,maxcapacity)
					elseif(customItemData["randomItemCount"])then
						-- Pre-defined maximum amount of items we can spawn at once
						local maxitems = (tonumber(ustomItemData["maxItemCount"] or 1) or 1)
						-- Maximum items we can summon at once with our storage power
						local maxcapacity = math.floor(remainingStoragePower/powerCost)
						-- maxCount as many items as we are allowed to
						maxcount = math.min(maxitems,maxcapacity)
						
						-- Randomize the item count at the and
						while (itemCount<maxCount and math.random(20)>2) do
							itemCount = itemCount + 1
						end
					end
					
					-- Set item count
					customItemData["item"]["Count"] = itemCount
					
					-- Insert item to chest
					table.insert(loot["item"],customItemData["item"])
					
					-- Reset Timeout
					timeout = 0
					
					remainingStoragePower = remainingStoragePower - (powerCost*itemCount)
					
					print("!!! "..(powerCost).."/"..(itemCount))
				else
					write("Declined, price too high! "..powerCost..">"..remainingStoragePower.."!")
					timeout = timeout + 5
				end
			else
				validItem = false
				timeout = timeout + 1
			end
		end
	end
	
	-- Create 27 empty chest slots
	for s=1,27 do
		table.insert(slots,(s-1))
	end

	-- Check if there is any special loot
	if(loot["item"][1]==nil)then loot["item"] = nil end

	-- Try to add an item for each of the 27 slots 
	for i=0,26 do 
		for itemId,itemAmount in pairs(loot) do
			-- Put the item in a random slot!
			local slot = math.random(#slots)
			-- Special items first!
			if(loot["item"]~=nil)then
				-- Get the data of the first special item
				local data = loot["item"][1]
				-- Put the item in the previously chosen slot
				data["Slot"] = slots[slot]
				-- Put it into the chest
				table.insert(dataTable["Items"],data)
				-- Remove it from the special loot list
				table.remove(loot["item"],1)
				-- Throw the list away if its empty
				if(loot["item"][1]==nil)then loot["item"] = nil end
			else
				table.insert(dataTable["Items"],{["Slot"] = slots[slot],["id"] = itemId,["Count"] = math.min(itemAmount,64)})
				if(itemAmount>64)then
					loot[itemId] = loot[itemId] - 64
				else   
					loot[itemId] = nil
				end
			end
			table.remove(slots,slot)
			break
		end
	 end
	 dataTable["CustomName"] = (advitem.q_color[chestRarity]).."§l"..firstToUpper(advitem.qualitys[chestRarity])..chest_types[_chestType].."Chest§r"
	 return dataTable
end


function addNewItemPool(_table,_name)
	item_pool[#item_pool+1] = _table
	chest_types[#chest_types+1] = _name
end

function addNewItemToPool(_poolID,_itemTable)
	if(item_pool[_poolID]==nil)then
		item_pool[_poolID] = {}
	end
	item_pool[_poolID][#item_pool[_poolID]+1] = _itemTable
end

function placeChest(...)
 local tArgs = arg
 
 local x = 0
 local y = 23
 local z = 0
 local chestType = 1
 if(math.random(5)>2)then chestType = math.random(#item_pool) end
 
 local startDifficulty = 1

 if(#tArgs==1)then
  startDifficulty = tonumber(tArgs[1])
 elseif(#tArgs==2)then
  startDifficulty = tonumber(tArgs[1])
  chestType = tonumber(tArgs[2])
 elseif(#tArgs==3)then
  x = tonumber(tArgs[1])
  y = tonumber(tArgs[2])
  z = tonumber(tArgs[3])
 elseif(#tArgs==4)then
  startDifficulty = tonumber(tArgs[1])
  x = tonumber(tArgs[2])
  y = tonumber(tArgs[3])
  z = tonumber(tArgs[4])
 elseif(#tArgs==5)then
  startDifficulty = tonumber(tArgs[1])
  x = tonumber(tArgs[2])
  y = tonumber(tArgs[3])
  z = tonumber(tArgs[4])
  chestType = tonumber(tArgs[5])   
 end

 local datatag =  dcore.getNBTStringFromTable(chest.getChestData(startDifficulty,chestType))
 --print(datatag)
 
 a,e = commands.setblock(x,y,z,"minecraft:chest","1","replace",datatag)
 
 if(not a)then
  print("Error:"..e[1],(e[2] or ""))
  print_log("error","[chest] Failed to execute Command: /setblock " .. x .. " " .. y .. " " .. z .. " minecraft:chest 1 replace "..datatag.."; Error message:"..e[1]..(e[2] or "").."")
 end
end

-- Add equipment to chests

for i=1,4 do
	addNewItemToPool(i,advitem.getEquipmentForChest)
end

-- Add potions to chests
for i=1,5 do
	addNewItemToPool(i,potion.getPotionForChest)
end
