dcore.requireAPI("items")

local function count(input)
 local int = 0
 for k,v in pairs(input) do
  int = int+1
 end
 return int
end
 
qualitys = {"usual","unusual","rare","extraordinary","mythical","legendary","epic","forgotten"}
q_color = {"§f","§b","§3","§1","§5","§d","§6","§4","§2"}

local equipment = {}


-- Data for the Item generated
local itemData = {}

 
 equipment["zombie"] = {
  {["chance"] = 0.8,["items"] = {268,272,283,267,276},["type"] = "Sword"}, -- HAND
  {["chance"] = 0.3,["items"] = {301,305,317,309,313},["type"] = "Feet"}, -- FEET
  {["chance"] = 0.3,["items"] = {300,304,316,308,312},["type"] = "Legs"}, -- LEGS
  {["chance"] = 0.4,["items"] = {299,303,315,307,311},["type"] = "Chest"}, -- CHEST
  {["chance"] = 0.6,["items"] = {298,302,314,306,310},["type"] = "Head"}, -- HEAD
 }
 equipment["melee_skeleton"] = equipment["zombie"]
 equipment["player"] = equipment["zombie"]
 equipment["ranged_skeleton"] = {
  {["chance"] = 1,["items"] = {261},["type"] = "Bow"}, -- HAND
  {["chance"] = 0.3,["items"] = {301,305,317,309,313},["type"] = "Feet"}, -- FEET
  {["chance"] = 0.3,["items"] = {300,304,316,308,312},["type"] = "Legs"}, -- LEGS
  {["chance"] = 0.4,["items"] = {299,303,315,307,311},["type"] = "Chest"}, -- CHEST
  {["chance"] = 0.6,["items"] = {298,302,314,306,310},["type"] = "Head"}, -- HEAD
 }
 
 equipment["spider"] = {nil}
 equipment["caveSpider"] = {nil}
 equipment["blaze"] = {nil}
 equipment["creeper"] = {nil}
 equipment["slime"] = {nil}
 equipment["witch"] = {nil}
 equipment["wolf"] = {nil}
 equipment["enderman"] = {nil}
 equipment["endermite"] = {nil}
 
 
 local allench = {
  ["Sword"] = {
   {["id"] = 16,["maxlv"] = 5,["chance"] = .2}, -- Sharpness
   {["id"] = 17,["maxlv"] = 5,["chance"] = .2}, -- Smite
   {["id"] = 18,["maxlv"] = 5,["chance"] = .2}, -- Bane of A
   {["id"] = 19,["maxlv"] = 2,["chance"] = .1}, -- Knockback
   {["id"] = 20,["maxlv"] = 2,["chance"] = .1}, -- Fire Aspact
   {["id"] = 21,["maxlv"] = 3,["chance"] = .1}, -- Looting
   {["id"] = 34,["maxlv"] = 3,["chance"] = .3}, -- Unbreaking
  }, 
  ["Feet"] = {
   {["id"] = 34,["maxlv"] = 3,["chance"] = .3}, -- Unbreaking
   {["id"] = 0,["maxlv"] = 4,["chance"] = .3}, -- Protection
   {["id"] = 1,["maxlv"] = 4,["chance"] = .1}, -- Fire Protection
   {["id"] = 2,["maxlv"] = 4,["chance"] = .4}, -- Feather Falling
   {["id"] = 3,["maxlv"] = 4,["chance"] = .15}, -- Blast Protection
   {["id"] = 4,["maxlv"] = 4,["chance"] = .3}, -- Proj. Protection
   {["id"] = 7,["maxlv"] = 3,["chance"] = .01}, -- Thorns
   {["id"] = 8,["maxlv"] = 3,["chance"] = .1}, -- Thorns
  },
  ["Legs"] = {
   {["id"] = 34,["maxlv"] = 3,["chance"] = .3}, -- Unbreaking
   {["id"] = 0,["maxlv"] = 4,["chance"] = .3}, -- Protection
   {["id"] = 1,["maxlv"] = 4,["chance"] = .3}, -- Fire Protection
   {["id"] = 3,["maxlv"] = 4,["chance"] = .15}, -- Blast Protection
   {["id"] = 4,["maxlv"] = 4,["chance"] = .15}, -- Proj. Protection
   {["id"] = 7,["maxlv"] = 3,["chance"] = .01}, -- Thorns
  },
  ["Chest"] = {
   {["id"] = 34,["maxlv"] = 3,["chance"] = .3}, -- Unbreaking
   {["id"] = 0,["maxlv"] = 4,["chance"] = .3}, -- Protection
   {["id"] = 1,["maxlv"] = 4,["chance"] = .3}, -- Fire Protection
   {["id"] = 3,["maxlv"] = 4,["chance"] = .15}, -- Blast Protection
   {["id"] = 4,["maxlv"] = 4,["chance"] = .15}, -- Proj. Protection
   {["id"] = 7,["maxlv"] = 3,["chance"] = .1}, -- Thorns
  },
  ["Head"] = {
   {["id"] = 34,["maxlv"] = 3,["chance"] = .3}, -- Unbreaking
   {["id"] = 0,["maxlv"] = 4,["chance"] = .3}, -- Protection
   {["id"] = 1,["maxlv"] = 4,["chance"] = .3}, -- Fire Protection
   {["id"] = 3,["maxlv"] = 4,["chance"] = .15}, -- Blast Protection
   {["id"] = 4,["maxlv"] = 4,["chance"] = .15}, -- Proj. Protection
   {["id"] = 7,["maxlv"] = 3,["chance"] = .01}, -- Thorns
  },
  ["Bow"] = {
   {["id"] = 48,["maxlv"] = 5,["chance"] = .3}, -- Power
   {["id"] = 49,["maxlv"] = 2,["chance"] = .3}, -- Punch
   {["id"] = 50,["maxlv"] = 1,["chance"] = .15}, -- Flame
   {["id"] = 51,["maxlv"] = 1,["chance"] = .15}, -- Infinity
   {["id"] = 34,["maxlv"] = 3,["chance"] = .3}, -- Unbreaking
  },
 }

 
local function overrideTable(_a,_b)
 local c = _a
 for k,v in pairs(_b) do
  if(type(v)=="table")then
   c[k] = overrideTable(_a[k],v)
  else
   c[k] = v
  end
 end
 return c
end
function setItemData(_key,_value)
 itemData[_key] = _value
end
function addOnItemData(_key,_value)
 itemData[_key] = itemData[_key] + _value
end
function getItemData(_key)
 if(_key)then
  return itemData[_key]
 else
  return itemData
 end
end

-- Hijack-able function
function equipmentRandTier(piecechance,difficulty)
 local tier = getItemData("tier")
 if(difficulty<10)then
  return math.random(difficulty+3)<(difficulty*piecechance)-(16*tier)+(math.floor(difficulty*0.9))+(math.floor((difficulty-5)*0.9))
 elseif(difficulty<32)then
  return math.random(difficulty+3)<(difficulty*piecechance)-(17*tier)+(math.floor(difficulty*0.85))+(math.floor((difficulty-5)*0.8))-(math.floor((difficulty-11)*1.1))
 else
  return math.random(difficulty)<(difficulty*piecechance)-(18*tier)+(math.floor(difficulty*0.6))
 end
end
function getColorOfArmor()
 local r,g,b = 0
 
 for i=1,4 do
  r = (r or 0)+((math.random(2)-1))
  g = (g or 0)+((math.random(2)-1))
  b = (b or 0)+((math.random(2)-1))
 end
 
 local rarity_level = math.pow((2-r),2)+math.pow((2-g),2)+math.pow((2-b),2)
 local colorCode = (math.floor(b*63.75)+256*math.floor(g*63.75)+65536*math.floor(r*63.75))
 return colorCode,rarity_level
end
function getPriceOfItem(color_value)
 local q = getItemData("quality")
 return math.floor(((getItemData("baseprice")+q)*(3^(q))/2+getItemData("enchprice"))*((10+color_value)/10))
end
function getRarityLevelOfItem(_forceQ)
 -- change back to "_forceQ or 1", when releasing!!!
 local q = _forceQ or 1
 local chance = {0.25,0.3,0.35,0.4,0.4,0.4,0.4,0.4} --{0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75}
 while((math.random(20)/20)<=chance[q] and q<#qualitys)do q = q + 1 end
 return q
end



function getLoreOfItem(_colorValue)
 local shopprice = advitem.getPriceOfItem(_colorValue)
 local enchArr = getItemData("loreTable")
 
 table.insert(enchArr,"\"Rarity is "..q_color[getItemData("quality")].."§o"..qualitys[getItemData("quality")].."§5§o\"")
 table.insert(enchArr,"\"Price is about "..shopprice.." gold\"")
 setItemData("loreTable",enchArr)
end


-- Equipment processing functions
function initializeItem(_dlevel,_typeOfItem,mobname,_forceQ)
 -- TODO: Check inputs!
 
 -- FORCE high quali
 --_forceQ = 7
 
 
 setItemData("dataTable",{})
 setItemData("loreTable",{})
 setItemData("enchTable",{})
 setItemData("color",nil)
 
 setItemData("difficultyLevel",_dlevel)
 
 setItemData("tier",0) -- tier of weapon/armor
 setItemData("value",0) -- level-like value of item
 setItemData("baseprice",0)
 setItemData("enchprice",0)
 setItemData("quality",advitem.getRarityLevelOfItem(_forceQ))

 
 setItemData("mobname",mobname)
 
 -- what slot the item is in
 setItemData("slot",_typeOfItem or math.random(#equipment[mobname]))
 
 -- For bows in Chest

 
 if(equipment[mobname][getItemData("slot")]~=nil)then
  -- getTierOfWeapon()
  while(advitem.equipmentRandTier(equipment[mobname][getItemData("slot")]["chance"],_dlevel) and getItemData("tier")<#equipment[mobname][getItemData("slot")]["items"])do --+math.floor(difficulty+3/(difficulty))
   addOnItemData("tier",1)
   addOnItemData("value",((getItemData("tier")-1)*2+1))
   addOnItemData("baseprice",((getItemData("tier")-1)*23+11))
  end
 end
 
 -- FORCE Tier three
 --setItemData("tier",3)
 
 
 setItemData("itemID",0)
 if(equipment[mobname]~=nil)then
  write("A")
  if(#equipment[mobname]>0)then
   write("B")
   write(equipment[mobname][getItemData("slot")]["items"][getItemData("tier")] or "???")
   write(getItemData("tier"))
   write(getItemData("slot"))
   setItemData("itemID",equipment[mobname][getItemData("slot")]["items"][getItemData("tier")] or 0)
  end
 end
end
function getMobName(_mobname)
 local mobname = _mobname or "zombie"
 
 if(equipment[mobname] == nil)then
  mobname = "zombie"
 end 
 
 if(math.random(11)==1 and mobname=="player")then
  mobname = "ranged_skeleton"
  setItemData("slot",1)
 end
 
 return mobname
end
function canOneMoreEnchantment(_dlevel,es)
 local difficultyAdder = (-17*es)
 local levelReducer = (math.floor(_dlevel/8)*5)
 local tierAdder = ((1-getItemData("tier"))*3)
 return (math.random(_dlevel)<_dlevel+difficultyAdder+levelReducer+tierAdder)
end
function getEnchantmentOfItem()
 local choosen_ench = {}
 local es = 1 -- how many enchantment, increases difficulty over time, increases with timeouts
 local effective_es = 1 -- how many enchantment, increases item value over time, not effected by timeouts
 
 -- Hardness Level for mob to generate
 local dLevel = getItemData("difficultyLevel")
 local mobname = getItemData("mobname")
 local slot = getItemData("slot")
 
	-- Calculating ench on item
 while(canOneMoreEnchantment(dLevel,es))do -- +math.floor(10/difficulty-10)
  local effect = 0
  local timeout = 30
  	
  while timeout>0 do
   effect = math.random(#allench[equipment[mobname][slot]["type"]])
   if(math.floor(allench[equipment[mobname][slot]["type"]][effect]["chance"]*dLevel)>math.random(dLevel))then
    if((choosen_ench[(allench[equipment[mobname][slot]["type"]][effect]["id"]+1)] or 0) < allench[equipment[mobname][slot]["type"]][effect]["maxlv"])then
     choosen_ench[(allench[equipment[mobname][slot]["type"]][effect]["id"]+1)] = (choosen_ench[(allench[equipment[mobname][slot]["type"]][effect]["id"]+1)] or 0) + 1
     break
    end
   end
   timeout = timeout - 1
  end  
  -- Increase item price with enchantments
  if(timeout>0)then
   effective_es = effective_es + 1
   addOnItemData("value",effective_es + math.random(2))
   addOnItemData("enchprice",24*(es-1) + math.random(2))
  end
  es = es + 1	 
 end
 -- Building enchantment Tag and pricing
 if(count(choosen_ench)>0)then
  for k,v in pairs(choosen_ench) do
   if(choosen_ench[k]~=nil)then
    -- Add enchantment into the table for ench's
    local enchArr = getItemData("enchTable")
	table.insert(enchArr,{["id"] = (k-1),["lvl"] = v})
	setItemData("enchTable",enchArr)
	
    addOnItemData("value",v)
	addOnItemData("enchprice",v*11)
   end
  end
 end
end

-- _dlevel = guideline level of item
-- _typeOfItem = slot the item is in
-- _mobname = {zombie,player,ranged_skeleton,...}
function getEquipment(_dlevel,_typeOfItem,_mobname,_forceQ)
 --dcore.evaluateInputs(_dlevel,_typeOfItem,_mobname,_forceQ)
 local mobname = advitem.getMobName(_mobname)
 advitem.initializeItem(_dlevel,_typeOfItem,mobname,_forceQ)
 local returnTable = {}
 local additionalInfo = false
 
 -- calculate Enchantments
 if(getItemData("tier")>0)then
  addOnItemData("value",((math.random(2)-1)/2))
  addOnItemData("baseprice",math.random(getItemData("tier")*2))
  advitem.getEnchantmentOfItem()
  local colorValue = 0
  -- Colored Armor
  
  -- rework, bacuse t and i are not existing anymore!
  if(getItemData("tier")==1 and getItemData("slot")>1 and math.floor(100)>1)then
   local a,b = advitem.getColorOfArmor()
   setItemData("color",a)
   colorValue = b
  end
  
  advitem.getLoreOfItem(colorValue)
  local itemName = items.getName(getItemData("itemID"))
  local dataTable = {}
  dataTable["id"] = getItemData("itemID")
  dataTable["tag"] = {}
  
  -- Add ench tag, if existing
  if(table.getn(getItemData("enchTable"))>0)then dataTable["tag"]["ench"] = getItemData("enchTable") end
  -- Add lore and name of Item
  dataTable["tag"]["display"] = {["Name"] = itemName,["Lore"] = getItemData("loreTable")}
  
  -- Add the color tag
  
  if(getItemData("color")~=nil)then dataTable["tag"]["display"]["color"] = getItemData("color") end

  --dataTable["tag"]["price"] = advitem.getPriceOfItem(colorValue)
  -- tags:
  --	?isLegendary // for effetcs
  --	?isSetItem   //
  --	?setID       // item set ID
  --	!price       // price for buy/selling item
  returnTable = overrideTable(dataTable,getItemData("dataTable"))
  -- I might add more to this, just tell me what :)
  additionalInfo = {["itemID"] = getItemData("itemID"),["value"] = getItemData("value")}
 end
 return returnTable,additionalInfo
end

