os.loadAPI(":dungeon/apis/dcore")
local effects = {}
effects[1] = {["name"] = "Speed",["potion"] = "Swiftness",["corrupt"] = true,["good"] = true,["max"] = -1}
effects[2] = {["name"] = "Slowness",["potion"] = "Slowness",["corrupt"] = true,["good"] = false,["max"] = -1}
effects[3] = {["name"] = "Haste",["potion"] = "Haste",["corrupt"] = true,["good"] = true,["max"] = -1}
effects[4] = {["name"] = "Mining Fatigue",["potion"] = "Dullness",["corrupt"] = false,["good"] = false,["max"] = -1}
effects[5] = {["name"] = "Strength",["potion"] = "Strength",["corrupt"] = true,["good"] = true,["max"] = -1}
effects[6] = {["name"] = "Instant Health",["potion"] = "Healing",["corrupt"] = false,["good"] = true,["max"] = -1}
effects[7] = {["name"] = "Instant Damage",["potion"] = "Harming",["corrupt"] = false,["good"] = false,["max"] = -1}
effects[8] = {["name"] = "Jump Boost",["potion"] = "Leaping",["corrupt"] = true,["good"] = true,["max"] = -1}
effects[9] = {["name"] = "Nausea",["potion"] = "Nausea",["corrupt"] = false,["good"] = false,["max"] = 1}
effects[10] = {["name"] = "Regeneration",["potion"] = "Regeneration",["corrupt"] = false,["good"] = true,["max"] = -1}
effects[11] = {["name"] = "Resistance",["potion"] = "Resistance",["corrupt"] = true,["good"] = true,["max"] = 4}
effects[12] = {["name"] = "Fire Resistance",["potion"] = "Fire Resistance",["corrupt"] = false,["good"] = true,["max"] = 1}
effects[13] = {["name"] = "Water Breathing",["potion"] = "Water Breathing",["corrupt"] = false,["good"] = true,["max"] = 1}
effects[14] = {["name"] = "Invisibility",["potion"] = "Invisibility",["corrupt"] = false,["good"] = true,["max"] = 1}
effects[15] = {["name"] = "Blindness",["potion"] = "Blindness",["corrupt"] = false,["good"] = false,["max"] = 1}
effects[16] = {["name"] = "Night Vision",["potion"] = "Night Vision",["corrupt"] = false,["good"] = true,["max"] = 1}
effects[17] = {["name"] = "Hunger",["potion"] = "Hunger",["corrupt"] = true,["good"] = false,["max"] = -1}
effects[18] = {["name"] = "Weakness",["potion"] = "Weakness",["corrupt"] = true,["good"] = false,["max"] = -1}
effects[19] = {["name"] = "Poison",["potion"] = "Poison",["corrupt"] = false,["good"] = false,["max"] = -1}
effects[20] = {["name"] = "Wither",["potion"] = "Decay",["corrupt"] = false,["good"] = false,["max"] = -1}
effects[21] = {["name"] = "Health Boost",["potion"] = "Health Boost",["corrupt"] = true,["good"] = true,["max"] = -1}
effects[22] = {["name"] = "Absorption",["potion"] = "Absorption",["corrupt"] = true,["good"] = true,["max"] = -1}
effects[23] = {["name"] = "Saturation",["potion"] = "Saturation",["corrupt"] = true,["good"] = true,["max"] = -1}

--@positive: If the potion effect is good or bad. Good = true, bad = false
local function findEffect(positive,past)
	local n = math.random(1,#effects)
	if effects[n]["good"] == positive and not past:find(n .. ":") then
		effects[n]["id"] = n
		return effects[n]
	else
		return findEffect(positive,past)
	end
end

local function firstupper(str)
    return (str:gsub("^%l", string.upper))
end

--Creates a randomized potion name.
--@units: How many segments to be included in the center at maximum.
local name1 = {"chel", "pr", "aer", "cat", "lu", "f", "cr", "o", "ali", "exan", "at", "We"}
local name2 = {"est", "y", "ul", "in", "cr", "am", "im", "rd", "en", "imi", "ene", "rg"}
local name3 = {"ra", "an", "us", "itus", "um", "es", "son", "o", "is", "s", "fyr", "at"}
local function potion_name(units,seed)
	math.randomseed(seed)
	local name = name1[math.random(#name1)]
	for i = 1, units do
		name = name .. name2[math.random(#name2)]
	end
    return name .. name3[math.random(#name3)]
end


-- Creates a randomized table that represents a potion, might have positive and negative effect.
-- Potency/Duration increases with difficulty.
-- @difficulty: Potency of Potion.
-- returns:
-- CustomPotionEffects as table
-- custom name suggestion
-- if the potion should be throw-able

function generateDropPotion(_difficulty)
	local t = {}
	local choosenEffects = {}
	local dif = math.floor(_difficulty/5)+math.random(2)
	local splash = true
	while dif>0 do
		if(math.random(20)==1)then end
		local pickedEffect = math.random(#effects)
		-- Increase chance of good effects by a little bit
		--if(effects[pickedEffect]["good"] == false)then pickedEffect = math.random(#effects) end
		-- Prevent over-using a effect
		
		if(choosenEffects[pickedEffect]==nil)then	choosenEffects[pickedEffect] = {["potency"] = 0,["duration"] = 1}	end
		
		while(choosenEffects[pickedEffect]["potency"]>=effects[pickedEffect]["max"] and not (effects[pickedEffect]["max"]<0))do
			pickedEffect = math.random(#effects)
			if(choosenEffects[pickedEffect]==nil)then
				choosenEffects[pickedEffect] = {["potency"] = 0,["duration"] = 1}
			end
		end
		local improve = math.random(5,math.floor(dif/10+6))
		while(improve>0 and dif>0)do
			if(choosenEffects[pickedEffect]["potency"]>=effects[pickedEffect]["max"] and math.random(2)==1)then
				choosenEffects[pickedEffect]["potency"] = choosenEffects[pickedEffect]["potency"] + 1
				dif = dif - choosenEffects[pickedEffect]["potency"]
			else
				choosenEffects[pickedEffect]["duration"] = choosenEffects[pickedEffect]["duration"] + 200
				dif = dif - 1
			end
			improve = improve - 1
		end
		--choosenEffects[pickedEffect] = effects[pickedEffect]["good"]
	end
	
	-- Fix some opposite things: (4 Speed + 2 Slowness => 2 Speed)
	function moderateOppositePotionPotency(potionA,potionB)
		if(choosenEffects[potionA] and choosenEffects[potionB])then
			while(choosenEffects[potionA]["potency"]>=0 and choosenEffects[potionB]["potency"]>=0)do
				choosenEffects[potionA]["potency"] = choosenEffects[potionA]["potency"] - 1
				choosenEffects[potionB]["potency"] = choosenEffects[potionB]["potency"] - 1
			end	
		end
	end
	
	moderateOppositePotionPotency(1,2)		-- Movement-Speed
	moderateOppositePotionPotency(3,4)		-- Attack-Speed
	moderateOppositePotionPotency(5,18) 	-- Attack-Damage
	moderateOppositePotionPotency(6,7)		-- Initial Health
	moderateOppositePotionPotency(10,19)	-- Health (Poison)
	moderateOppositePotionPotency(10,20)	-- Health (Wither)
	moderateOppositePotionPotency(17,23)	--  Hunger
	
	local highestID = 0
	local seed = 0
	
	for k,v in pairs(choosenEffects) do
		if(v["potency"]>=0)then -- No potion potency? Not gonna put that in!
			local p = {}
			p["Id"] = k
			p["Amplifier"] = v["potency"]
			p["Duration"] = v["duration"]
			p["Ambient"] = 0
			p["ShowParticles"] = 0
			if(choosenEffects[highestID]==nil)then highestID = k end
			if((choosenEffects[highestID]["potency"] or -1)<v["potency"])then
				highestID = k
			end
			seed = seed + k*(v["potency"]+v["duration"])
			table.insert(t,p)
		end
	end
	
	local potionNames = {}
	potionNames[1] = {"Fast","Agility"}
	potionNames[2] = {"Slowing","Sticky"}
	potionNames[3] = {"Agility","Fast"}
	potionNames[4] = {"Slowing","Sticky"}
	potionNames[5] = {"Strengthening","Strength-Boosting"}
	potionNames[6] = {"Health-Boosting","Healing","Healthy"}
	potionNames[7] = {"Damaging","Dangerous"}
	potionNames[8] = {"Jump-Boosting"}
	potionNames[9] = {"Confusing"}
	potionNames[10] = {"Regenerating","Healing"}
	potionNames[11] = {"Reinforcing"}
	potionNames[12] = {"Anti-Fire","Anti-Lava","Lava-Hugger"}
	potionNames[13] = {"Fish-Mode"}
	potionNames[14] = {"Cloaking","Hiding",}
	potionNames[15] = {"Blinding","Blending"}
	potionNames[16] = {"Owl-Vision"}
	potionNames[17] = {"Hunger"}
	potionNames[18] = {"Weakening"}
	potionNames[19] = {"Damaging","Poisoning"}
	potionNames[20] = {"Damaging","Poisoning"}
	potionNames[21] = {"Health-Boosting","Healthy"}
	potionNames[22] = {"Health-Boosting","Healthy"}
	potionNames[23] = {"Anti-Hunger"}
	
	
	local pName = firstupper(potion_name(2,seed))
	local eName = potionNames[highestID][math.random(#potionNames[highestID])]
	
	name = eName.." Potion of "..pName
	
	return t,name,true
end

--Creates a randomized table that represents a potion.
--@difficulty: How good/bad the potion is.
--@positive: If the potion effect is good or bad. Good = true, bad = false
--@count: How many potion effects to apply.
function createpotion(difficulty,positive,count)
	local r = {}
	local past = ""
	for i = 1, count do
		local potion = findEffect(positive,past)
		past = past .. potion["id"] .. ":"
		r[i] = {}
		r[i]["Id"] = potion["id"]
		r[i]["Amplifier"] = math.random(1,math.floor((difficulty/5)*1+0.5))
		r[i]["Duration"] = math.random(20,difficulty*480)
		r[i]["Ambient"] = 0
		r[i]["ShowParticles"] = 0
	end
	return r
end

function ctnbt(t,name)
	local str = "CustomPotionEffects:["
	for i = 1, #t do
		local c = t[i]
		str = str .. "{Id:" .. c["Id"] .. ",Amplifier:" .. c["Amplifier"] .. ",Duration:" .. c["Duration"] .. ",Ambient:" .. c["Ambient"] .. ",ShowParticles:" .. c["ShowParticles"] .. "},"
	end
	str = str:sub(1,-2)
	if name then
		str = str .. "],display:{Name:\"" .. name .. "\"}"
	else
		str = str .. "]"
	end
	return str
end

--Takes the format from createpotion() and compiles it to a string starting with "tag:{CustomPotionEffects:[".
--@table: A table given by createpotion to compile to NBT.
--@name: A name for your brand new fancy potion. If nil, it is set based off of the first effect.
function compileToNBT(t,name)
	local str = "tag:{CustomPotionEffects:["
	for i = 1, #t do
		local c = t[i]
		str = str .. "{Id:" .. c["Id"] .. ",Amplifier:" .. c["Amplifier"] .. ",Duration:" .. c["Duration"] .. ",Ambient:" .. c["Ambient"] .. ",ShowParticles:" .. c["ShowParticles"] .. "},"
	end
	str = str:sub(1,-2)
	if name then
		str = str .. "],display:{Name:\"" .. name .. "\"}}"
	else
		str = str .. "]}"
	end
	return str
end
