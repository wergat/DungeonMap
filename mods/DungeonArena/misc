if not achievement then
	dcore.requireAPI("achievement")
end
if not villager then
	dcore.requireAPI("villager")
end
get_text = script.get_text
local function get_v(id, permanent)
	local path; if permanent then path = ".permanent_config" else path = ".config" end
	if not fs.exists(path) then
		return nil
	end
	local open = fs.open(path, "r")
	local all = open.readAll()
	open.close()
	all = textutils.unserialize(all)
	if all[id] then
		return all[id]
	else
		return nil
	end
end
local function set_v(id, s, permanent)
	local path; if permanent then path = ".permanent_config" else path = ".config" end
	local all
	if not fs.exists(path) then
		all = "{}"
	else
		local open = fs.open(path, "r")
		all = open.readAll()
		open.close()
	end
	all = textutils.unserialize(all)
	all[id] = s
	all = textutils.serialize(all)
	local open = fs.open(path, "w")
	open.write(all)
	open.close()
	if permanent then
		if fs.exists(":dungeon/mods/DungeonArena/.internal_perm_config") then
			fs.delete(":dungeon/mods/DungeonArena/.internal_perm_config")
		end
		fs.copy(path, ":dungeon/mods/DungeonArena/.internal_perm_config")
	end
end
--from http://lua-users.org/wiki/SplitJoin, thanks!
function explode(d,p)
  local t, ll
  t={}
  ll=0
  if(#p == 1) then return {p} end
    while true do
      l=string.find(p,d,ll,true) -- find the next d in the string
      if l~=nil then -- if "not not" found then..
        table.insert(t, string.sub(p,ll,l-1)) -- Save it in our array.
        ll=l+1 -- save just after where we found it for searching next time.
      else
        table.insert(t, string.sub(p,ll)) -- Save what's left in our array.
        break -- Break at end, as it should be, according to the lua manual.
      end
    end
  return t
end
local function unlockHat(hat_type, is_hat)
	local hat_type = hat_type or get_text("hats.unknown")
	set_v(hat_type, true)
	for i = 1, #villager.hats do
		if villager.hats[i] == hat_type then
			commands.exec('/tellraw @a ["",{"text":"' .. villager.hat_names[i] .. '","color":"dark_red"},{"text":" ' .. get_text("hats.acquired") .. '!","color":"green"}]')
		end
	end
	sleep(tickspeed)
	_G["respawnHat"]()
end
commands.exec("/setblock 62 26 30 wall_sign 3 replace " .. get_text("hats.loading"))
if get_v("chosen_hat") == nil then
	set_v("chosen_hat", false)
end
local justStarted = true
local melting_hat = get_v("melting_hat") or false
local tickspeed = get_v("Internal Tick Speed") or 0.05; tickspeed = tickspeed*2
local pakka_hat = get_v("pakka_hat") or false
local skeleton_hat = get_v("skeleton_hat") or false
local bookshelf_hat = get_v("bookshelf_hat") or false
local big_hat = get_v("big_hat") or false
local treasure_hat = get_v("treasure_hat") or false

local treasures_found = get_v("treasures_found") or 0

sleep(5)

--If the head you're adding is from freshcoal, you need to put it in the format "uuid:base64" in freshcoal_skull_pl
local skull_pl = {"Atenefyr", "Wergat", "dan200", "MHF_Herobrine", "MHF_Alex", "MHF_Blaze", "MHF_CaveSpider", "MHF_Chicken", "MHF_Cow", "MHF_Creeper", "MHF_Enderman", "MHF_Ghast", "MHF_Golem", "MHF_LavaSlime", "MHF_MushroomCow", "MHF_Ocelot", "MHF_Pig", "MHF_PigZombie", "MHF_Sheep", "MHF_Skeleton", "MHF_Slime", "MHF_Spider", "MHF_Squid", "MHF_Steve", "MHF_Villager", "MHF_WSkeleton", "MHF_Zombie", "MHF_Cactus", "MHF_Cake", "MHF_Chest", "MHF_CocountB", "MHF_CocountG", "MHF_Melon", "MHF_OakLog", "MHF_Present1", "MHF_Present2", "MHF_Pumpkin", "MHF_TNT2"}
local freshcoal_skull_pl = {"822833e6-c3ec-457e-aeef-1fac97799e5f:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMzAyZTIyZjY1MDNjMzYzZGY2OWJmOWU5NDQ4ZmU4OWQyZjA1YmFlMzA1MzRiOGJiMTlkMjY4ZjA5ODliOTYifX19", "fc6f2ea4-543e-477f-98db-02c0f51f32d8:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvM2U4YWFkNjczMTU3YzkyMzE3YTg4YjFmODZmNTI3MWYxY2Q3Mzk3ZDdmYzhlYzMyODFmNzMzZjc1MTYzNCJ9fX0=", "0ceac85e-159d-4f9d-a1c2-c8acde792f23:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjFkZDRmZTRhNDI5YWJkNjY1ZGZkYjNlMjEzMjFkNmVmYTZhNmI1ZTdiOTU2ZGI5YzVkNTljOWVmYWIyNSJ9fX0=", "45eeb2cc-e4ef-4012-beae-c3bc6c79e939:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMzY4NWEwYmU3NDNlOTA2N2RlOTVjZDhjNmQxYmEyMWFiMjFkMzczNzFiM2Q1OTcyMTFiYjc1ZTQzMjc5In19fQ=="}
for i = 1, #_G["plist"] do
	skull_pl[#skull_pl+1] = _G["plist"][i]
end
local selected_skull = skull_pl[math.random(#skull_pl)]
local skull_author = selected_skull
if skull_author:find(":") then
	skull_author = "Freshcoal" --if you made any of the freshcoal hat skins and want credit, tweet me at @atenefyr or wergat at @wergat and we'll add it in :)
end
if selected_skull:sub(1,3) == "MHF" then
	skull_author = "Mojang"
end
local special_counts = {1, 10, 21, 42, 100, 666, 1000, 1024, 1337, 2135, 4033, 5899, 10000, 1000000}
local boot_count = get_v("boot_count", true)
local count_rarities = {1, 1, 1, 1, 2, 4, 4, 4, 5, 5, 6, 6, 7, 8}
local count_names = get_text("boots.boot_names")
local count_descriptions = get_text("boots.boot_descriptions")
for i = 1, #special_counts do
	if boot_count == special_counts[i] then
		local description = count_descriptions[i] or get_text("boots.description"):gsub("%s", boot_count)
		for _ = 1, #_G["plist"] do
			achievement.makeAchievement(count_names[i], description, _G["plist"][_], count_rarities[i], false)
		end
	end
end
if boot_count == 1000000 then
	big_hat = true
	unlockHat("big_hat")
end

commands.exec("/setblock 62 26 30 air")


while true do
	--If hat is selected, use it!
	for i = 1, #villager.hats do
		local success, dat = commands.exec("/clear @a minecraft:gold_block 0 1 {display:{Lore:[\"" .. villager["hats"][i] .."\"]}}")
		if success then
			if villager["hats"][i] == "disable_hat" then
				set_v("chosen_hat", false)
			else
				set_v("chosen_hat", villager["hats"][i])
			end
			sleep(0.2) --around what's right, don't use tickspeed just in case
			commands.exec("/replaceitem entity @a slot.armor.head minecraft:wool 1 5 {display:{Name:\"Temporary Hat\",Lore:[\"If you are reading this,\",\"please take off this helmet.\",\"Nothing is wrong, a rare bug has\",\"just occured, and you can fix\",\"it easily.\"]}}")
			if villager["hats"][i] == "disable_hat" then
				sleep(0.2)
				commands.exec("/replaceitem entity @a slot.armor.head air 1 0")
			end
		end
	end
	sleep(tickspeed)
	--check disabled hat
	local success, dat = commands.exec("/clear @a minecraft:redstone_block 0 1 {display:{Lore:[\"disable_hat\"]}}")
	if success then
		set_v("chosen_hat", false)
		sleep(0.2)
		commands.exec("/replaceitem entity @a slot.armor.head minecraft:wool 1 5 {display:{Name:\"Temporary Hat\",Lore:[\"If you are reading this,\",\"please take off this helmet.\",\"Nothing is wrong, a rare bug has\",\"just occured, and you can fix\",\"it easily.\"]}}")
		sleep(0.2)
		commands.exec("/replaceitem entity @a slot.armor.head air 1 0")
	end
	sleep(tickspeed)
	--current hat
	local current_hat = get_v("chosen_hat") or false
	local hat_position = 0
	for i = 1, #villager.hats-1 do
		if villager.hats[i] == current_hat then
			hat_position = i
		end
	end
	if type(current_hat) == "string" and villager.hat_blocks[current_hat] == nil then
		printError("WARNING: Attempted to select unidentified hat " .. current_hat .. ", defaulting to bandana")
		set_v("chosen_hat", "bandana_hat")
	end
	if type(current_hat) == "string" then
		for i = 1, #_G["plist"] do
			local hat_table1 = explode(":", villager.hat_blocks[current_hat])
			local hat_table = {}
			local skull_info = {}
			if #hat_table1 == 4 then
				hat_table[1] = hat_table1[1] .. ":" .. hat_table1[2]
				hat_table[2] = hat_table1[3]
				hat_table[3] = hat_table1[4]
			elseif #hat_table1 == 5 then
				hat_table = {"skull", 3, skull_author}
				if selected_skull:find(":") then
					skull_info = explode(":", selected_skull)
				end
			else
				hat_table = hat_table1
			end
			if #hat_table1 == 5 and not selected_skull:find(":") then
				commands.execAsync("/replaceitem entity " .. _G["plist"][i] .. " slot.armor.head " .. hat_table[1] .. " 1 " .. hat_table[2] .. " {SkullOwner:" .. selected_skull .. ",display:{Name:\"" .. SS("r") .. villager.hat_names[hat_position] .. "\",Lore:[\"Hat created by " .. hat_table[3] .. "\",\"Obtained by\",\"" .. villager.hat_descriptions[hat_position] .. "\"]}}")
			elseif #hat_table1 == 5 then
				commands.execAsync("/replaceitem entity " .. _G["plist"][i] .. " slot.armor.head " .. hat_table[1] .. " 1 " .. hat_table[2] .. " {SkullOwner:{Id:\"" .. skull_info[1] .. "\",Properties:{textures:[{Value:\"" .. skull_info[2] .. "\"}]}},display:{Name:\"" .. SS("r") .. villager.hat_names[hat_position] .. "\",Lore:[\"Hat created by " .. hat_table[3] .. "\",\"Obtained by\",\"" .. villager.hat_descriptions[hat_position] .. "\"]}}")
			else
				commands.execAsync("/replaceitem entity " .. _G["plist"][i] .. " slot.armor.head " .. hat_table[1] .. " 1 " .. hat_table[2] .. " {display:{Name:\"" .. SS("r") .. villager.hat_names[hat_position] .. "\",Lore:[\"Hat created by " .. hat_table[3] .. "\",\"Obtained by\",\"" .. villager.hat_descriptions[hat_position] .. "\"]}}")
			end
			sleep(tickspeed)
		end
	end
	sleep(tickspeed)
	
	
	--Rich achievement
	if not skeleton_hat then
		local success, dat = commands.exec("/clear @a minecraft:nether_star 0 0")
		if success then
			for i = 1, #_G["plist"] do
				achievement.makeAchievement(get_text("achievement.rich.name"), get_text("achievement.rich.description"), _G["plist"][i], 3, false)
			end
			skeleton_hat = true
			unlockHat("skeleton_hat")
		end
	end
	sleep(tickspeed)
	--Reader hat
	if _G["bookshelf_hat"] and not bookshelf_hat then
		for i = 1, #_G["plist"] do
			achievement.makeAchievement(get_text("achievement.reader.name"), get_text("achievement.reader.description"), _G["plist"][i], 2, false)
		end
		bookshelf_hat = true
		unlockHat("bookshelf_hat")
	end
	sleep(tickspeed)
	local success = nil; local dat = nil
	--Treasure Hat
	if not treasure_hat then
		local success, dat = commands.exec("/clear @a minecraft:double_plant 0 1")
		if success then
			treasures_found = treasures_found+1
			set_v("treasures_found", treasures_found)
			commands.exec('/tellraw @a ["",{"text":"' .. get_text("achievement.treasure.discovered"):gsub("!!s", treasures_found) .. '","color":"gold"}]')
		end
		if treasures_found >= 5 then
			for i = 1, #_G["plist"] do
				achievement.makeAchievement(get_text("achievement.treasure.name"), get_text("achievement.treasure.description"), _G["plist"][i], 5, false)
			end
			treasure_hat = true
			unlockHat("treasure_hat")
		end
	end
	--Pakka
	local success = nil
	if pakka_hat then
		success = false
	else
		success, dat = commands.exec("/clear @a minecraft:prismarine 0 0")
	end
	if success then
		for i = 1, #_G["plist"] do
			achievement.makeAchievement(get_text("achievement.pakka.name"), get_text("achievement.pakka.description"), _G["plist"][i], 5, false)
		end
		pakka_hat = true
		unlockHat("pakka_hat")
	end
	local success = nil; local dat = nil
	sleep(tickspeed)
	--ocelot
	if commands.execAsync("/testfor @e[type=Ozelot]") then
		commands.execAsync("/entitydata @e[type=Ozelot] {OwnerUUID:\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",Sitting:1b,CustomName:\"Bilbo\",CatType:3,Invulnerable:1b}")
	end
	sleep(tickspeed)
	--sponge+achievement
	local success = nil; local dat = nil
	local hasDone = false; local hasDone2 = false
	if achievement.checkAchievement(get_text("achievement.melt.name"), achievement.getNearestPlayer()) then
		hasDone = true
	end
	if achievement.checkAchievement(get_text("achievement.melt_clever.name"), achievement.getNearestPlayer()) then
		hasDone2 = true
	end
	local success, dat = commands.exec("/clear @a minecraft:sponge 0 1")
	if success then
		for i = 1, #_G["plist"] do
			local u = _G["plist"][i]
			print("Melt achievement for " .. u)
			--if water, no fire, else, yes fire
			local success, dat = commands.exec("/clear " .. u .. " minecraft:water_bucket")
			if success then
				commands.exec("/execute " .. u .. " ~ ~ ~ playsound random.splash " .. u .. " ~ ~ ~ 1")
				commands.exec("/give " .. u .. " minecraft:bucket")
				if not hasDone2 then
					achievement.makeAchievement(get_text("achievement.melt_clever.name"), get_text("achievement.melt_clever.description"), u, 8, false)
					melting_hat = true
					unlockHat("melting_hat")
				end
			else
				commands.exec("/execute " .. u .. " ~ ~ ~ setblock ~ ~ ~ fire")
				sleep(0.5) --higher/lower tickspeeds can result in it breaking
				commands.exec("/execute " .. u .. " ~ ~ ~ fill ~-5 ~-5 ~-5 ~5 ~5 ~5 air 0 replace fire") --remove fire nearby
				if not hasDone then
					achievement.makeAchievement(get_text("achievement.melt.name"), get_text("achievement.melt.description"), u, 6, false)
				end
			end
			commands.exec("/setblock 74 27 30 sponge 1")
		end
	end
	local success = nil; local dat = nil;
	sleep(tickspeed)
	--red herring
	local success, dat = commands.exec("/clear @a minecraft:carpet 4 1")
	if success then
		for i = 1, #_G["plist"] do
			achievement.makeAchievement(get_text("achievement.herring.name"), get_text("achievement.herring.description"), _G["plist"][i], 5, false)
		end
		commands.exec("/tp @a ~ 100000 ~")
	end
	local success = nil; local dat = nil;
	sleep(tickspeed)
	if justStarted then
		_G["respawnHat"]()
		justStarted = false
	end
	sleep(0.2)
end