--,{0,10,0,0,0,0,0,0,0}

generation.data["generationBaseHeight_ruins"] = generation.data["generationBaseHeight_ruins"] or 3
generation.data["generationHeightMax_ruins"] = generation.data["generationHeightMax_ruins"] or 8.4
generation.data["heightMax_ruins"] = generation.data["heightMax_ruins"] or 14

function getRuinHeight(x,y)
 local special = (generation.getNoiseByPosition(x-1,y)+ generation.getNoiseByPosition(x+1, y)+ generation.getNoiseByPosition(x, y+1)+ generation.getNoiseByPosition(x, y-1) ) / 4 -- 1 
 local corners = (getNoiseByPositionForRuins(x-1,y-1)+ getNoiseByPositionForRuins(x+1, y-1)+ getNoiseByPositionForRuins(x-1, y+1)+ getNoiseByPositionForRuins(x+1, y+1) ) / 4 -- 1
 local sides   = (getNoiseByPositionForRuins(x-1,y)  + getNoiseByPositionForRuins(x+1, y)  + getNoiseByPositionForRuins(x, y-1)  + getNoiseByPositionForRuins(x, y+1) ) /  4 -- 1
 local center  =  getNoiseByPositionForRuins(x, y) / 2 -- .5
 local noise = math.floor((corners + sides + center + special)/3)
 return noise
end

function getNoiseByPositionForRuins(x,z)
 math.randomseed((data["seed"]-data["subSeed"]*z)+(x*(z-4))+(z*6))
 local size = math.random(data["generationHeightMax_ruins"]*10)/10
 while (math.random(5)==1 and size<data["heightMax_ruins"]) do size = size + 2 end
 return size
end

function getBiomeByPosition(x,y,level)
 local level = level
 if(level > 3)then level = 3 end
 local xinchunk = x%chunk_sizeX -- X Position in 0/0 chunk
 local yinchunk = y%chunk_sizeY -- Y Position in 0/0 chunk
 
 local lowest_distance = 200
 local lowest_distance_biome = 0
 
 for b=1,#data["biome_levels"][level] do
  for xfactor=-1,1 do
   for yfactor=-1,1 do
    math.randomseed(getRandomSeedForBiome(x,y,xfactor,yfactor,b,level))
    	
    local biomecenterx = math.random(chunk_sizeX)+(chunk_sizeX*xfactor) -- X center of biome b in Chunk xfactor/yfactor relative to 0/0 chunk
    local biomecentery = math.random(chunk_sizeY)+(chunk_sizeY*yfactor) -- Y center of biome b in Chunk xfactor/yfactor relative to 0/0 chunk
	local distance = 0
	
	if(level>3)then -- this is ruins stuff
     distance =  math.sqrt(math.pow((xinchunk - biomecenterx),2)+math.pow((yinchunk - biomecentery),2))
	else
     distance =  positive(xinchunk - biomecenterx) + positive(yinchunk - biomecentery)
	end
    if(distance<lowest_distance)then
     lowest_distance = distance
     lowest_distance_biome = b
    end
   end
  end
 end 
 return data["biome_levels"][level][lowest_distance_biome]
end

function getBiomeByPosition(x,y,level)
 local level = level
 if(level > 4)then level = 4 end
 local xinchunk = x%chunk_sizeX -- X Position in 0/0 chunk
 local yinchunk = y%chunk_sizeY -- Y Position in 0/0 chunk
 
 local lowest_distance = 200
 local lowest_distance_biome = 0
 
 for b=1,#data["biome_levels"][level] do
  for xfactor=-1,1 do
   for yfactor=-1,1 do
    math.randomseed(getRandomSeedForBiome(x,y,xfactor,yfactor,b,level))
    	
    local biomecenterx = math.random(chunk_sizeX)+(chunk_sizeX*xfactor) -- X center of biome b in Chunk xfactor/yfactor relative to 0/0 chunk
    local biomecentery = math.random(chunk_sizeY)+(chunk_sizeY*yfactor) -- Y center of biome b in Chunk xfactor/yfactor relative to 0/0 chunk
	local distance = 0
	
	if(level>3)then
     distance =  math.sqrt(math.pow((xinchunk - biomecenterx),2)+math.pow((yinchunk - biomecentery),2))
	else
     distance =  positive(xinchunk - biomecenterx) + positive(yinchunk - biomecentery)
	end
    if(distance<lowest_distance)then
     lowest_distance = distance
     lowest_distance_biome = b
    end
   end
  end
 end 
 return data["biome_levels"][level][lowest_distance_biome]
end