local tArgs = {...}
if(not dcore)then os.loadAPI(":dungeon/dcore/apis/dcore") end

local running = true
local entryList = {}
local page_scrolled = 0
local scrolled = 1
local search
local selected = false
local tx,ty = term.getSize()
local ctrlMenuOpen = false
local ctrlMenuSelected = 1
local ctrlOptions = {"Save","Exit"}
local optionsSelected = 1

if(#tArgs == 2)then
	config.set(tArgs[1],tArgs[2])
	running = false
elseif(#tArgs == 1)then
	search = tArgs[1]
end

function getDataFormatted(input)
	if(type(input) == "string")then
		return "\""..string.sub(tostring(input),1,40).."\""
	else
		return (tostring(input))
	end
end

function runOption()
	if(ctrlMenuSelected == 0)then
		selected = not selected
		draw()
	elseif(ctrlOptions[ctrlMenuSelected] == "Save")then
		config.save()
		term.setBackgroundColor(colors.black)
		term.setCursorPos(1,ty)
		term.clearLine()
		term.setTextColor(colors.yellow)
		term.write(" > Config saved!")
		term.setTextColor(colors.white)
		ctrlMenuOpen = false
	elseif(ctrlOptions[ctrlMenuSelected] == "Exit")then
		running = false
	end
end

function runSelection()
	local entry = entryList[(page_scrolled*(ty-1) + scrolled)]
	if(optionsSelected == 1)then
		local nativeType = type(entry.value)
		if(nativeType == "table")then
			term.setCursorPos(1,ty-4)
			term.clearLine()
			printError("Cannot change table with this editor!")
			return
		end
		draw()
		term.setCursorPos(1,ty-4)
		term.clearLine()
		write("Please enter new value:")
		term.setCursorPos(2,ty-3)
		term.clearLine()
		
		term.setBackgroundColor(colors.gray)
		sleep(.05)
		local newValue = read()
		term.setBackgroundColor(colors.black)
		local success = true
		term.setCursorPos(2,ty-2)
		term.clearLine()
		write("Successfully saved!")
		
		if(nativeType == "string")then
			config.set(entry.name,newValue)
			entryList[(page_scrolled*(ty-1) + scrolled)].value = newValue
		elseif(nativeType == "boolean" and newValue == "false" or newValue == "true")then
			config.set(entry.name,(newValue == "true"))
			entryList[(page_scrolled*(ty-1) + scrolled)].value = (newValue == "true")
		elseif(nativeType == "number" and type(tonumber(newValue)) == "number")then
			config.set(entry.name,tonumber(newValue))
			entryList[(page_scrolled*(ty-1) + scrolled)].value = tonumber(newValue)
		else
			-- Somethign went wrong lol
			term.setCursorPos(2,ty-2)
			term.clearLine()
			write("Failed to save, invalid input")
			success = false
		end

	elseif(optionsSelected == 2)then
		local nativeType = type(entry.default)
		if(nativeType == "table" or type(entry.value) == "table")then
			term.setCursorPos(1,ty-4)
			term.clearLine()
			printError("Cannot change table with this editor!")
			return
		end
		draw()
		term.setCursorPos(1,ty-4)
		term.clearLine()
		write("Please enter new default value:")
		term.setCursorPos(2,ty-3)
		term.clearLine()

		term.setBackgroundColor(colors.gray)
		sleep(.05)
		local newDefault = read()
		term.setBackgroundColor(colors.black)
		local success = true
		term.setCursorPos(2,ty-2)
		term.clearLine()
		write("Successfully saved!")
		
		if(nativeType == "string")then
			config.setDefault(entry.name,newDefault)
			entryList[(page_scrolled*(ty-1) + scrolled)].default = newValue
		elseif(nativeType == "boolean" and newDefault == "false" or newDefault == "true")then
			config.setDefault(entry.name,(newDefault == "true"))
			entryList[(page_scrolled*(ty-1) + scrolled)].default = (newDefault == "true")
		elseif(nativeType == "number" and type(tonumber(newDefault)) == "number")then
			config.setDefault(entry.name,tonumber(newDefault))
			entryList[(page_scrolled*(ty-1) + scrolled)].default = tonumber(newDefault)
		else
			-- Somethign went wrong lol
			term.setCursorPos(2,ty-2)
			term.clearLine()
			write("Failed to save, invalid input")
			success = false
		end

	elseif(optionsSelected == 3)then
		draw()
		term.setCursorPos(1,ty-4)
		term.clearLine()
		write("Please write \"Yes\" to delete this entry!")
		term.setCursorPos(2,ty-3)
		term.clearLine()
		sleep(.05)
		local accept = read()
		term.setCursorPos(2,ty-2)
		term.clearLine()
		term.setTextColor(colors.yellow)
		if(accept == "Yes")then
			config.setDefault(entry.name,nil)
			config.set(entry.name,nil)
			table.remove(entryList,(page_scrolled*(ty-1) + scrolled))	
			write("Successfully deleted!")
			selected = false
		else
			write("Okay, deletion aborted!")
		end
		term.setTextColor(colors.white)
	elseif(optionsSelected == 4)then
		-- TODO: this. :/ no motivation right now, should not take long
	end
end

function run()
	while running do
		local tEvent = {os.pullEvent("key")}
		if(keys.getName(tEvent[2]) == "leftCtrl")then
			ctrlMenuOpen = not ctrlMenuOpen
			draw()
		elseif(keys.getName(tEvent[2]) == "space" or keys.getName(tEvent[2]) == "enter")then
			if(ctrlMenuOpen)then
				runOption()
			else
				if(selected)then
					runSelection()
				else
					selected = true
					draw()
				end
			end
		end
		if(ctrlMenuOpen)then
			if(keys.getName(tEvent[2]) == "a" or keys.getName(tEvent[2]) == "left")then
				ctrlMenuSelected = ctrlMenuSelected - 1
				if(ctrlMenuSelected < 0)then ctrlMenuSelected = #ctrlOptions end
				draw()
			elseif(keys.getName(tEvent[2]) == "d" or keys.getName(tEvent[2]) == "right")then
				ctrlMenuSelected = ctrlMenuSelected + 1
				if(ctrlMenuSelected > #ctrlOptions)then ctrlMenuSelected = 0 end
				draw()
			end
		elseif(selected)then
			if(keys.getName(tEvent[2]) == "a" or keys.getName(tEvent[2]) == "left")then
				optionsSelected = optionsSelected - 1
				if(optionsSelected < 1)then optionsSelected = 4 end
				draw()
			elseif(keys.getName(tEvent[2]) == "d" or keys.getName(tEvent[2]) == "right")then
				optionsSelected = optionsSelected + 1
				if(optionsSelected > 4)then optionsSelected = 1 end
				draw()
			end
		end
		if(selected)then
			
		else
			if(keys.getName(tEvent[2]) == "up" or keys.getName(tEvent[2]) == "w")then
				scrolled = scrolled - 1
				if(scrolled < 1)then
					page_scrolled = page_scrolled - 1 
					scrolled = (page_scrolled < 0 and 1 or (ty-1))
				end
				if(page_scrolled < 0)then page_scrolled = 0 end
				draw()
			elseif(keys.getName(tEvent[2]) == "down" or keys.getName(tEvent[2]) == "s")then
				scrolled = scrolled + 1
				if(scrolled > (ty-1))then page_scrolled = page_scrolled + 1 scrolled = 1 end
				if(page_scrolled*(ty-1)+scrolled > (#entryList))then scrolled = #entryList-page_scrolled*(ty-1) end
				if(page_scrolled > (math.floor((#entryList-1)/(ty-1))))then 
					page_scrolled = (math.floor((#entryList-1)/(ty-1)))
					scrolled = #entryList-page_scrolled*(ty-1)
				end
				draw()
			end
		end
	end
end

function writeOptSelected(text,v)
	if(v)then
		term.setTextColor(colors.yellow)
		write("[")
		term.setTextColor(colors.white)
		write(text)
		term.setTextColor(colors.yellow)
		write("]")
		term.setTextColor(colors.white)
	else 
		write(" "..text.." ")
	end
end

function draw()
	term.clear()
	if(selected)then
		local entry = entryList[(page_scrolled*(ty-1) + scrolled)]
		term.setCursorPos(2,2)
		write("Name:  "..entry.name)
		term.setCursorPos(2,3)
		write("Type:  "..type(entry.value))
		term.setCursorPos(2,4)
		if(entry.default)then
			write("Default ["..type(entry.default).."]: "..getDataFormatted(entry.default))
			
		else
			write("Default: ")
			term.setTextColor(colors.red)
			write("No default found")
			term.setTextColor(colors.white)
		end
		term.setCursorPos(4,7)
		write("Value:   ")
		term.setBackgroundColor(colors.gray)
		write(getDataFormatted(entry.value))
		term.setBackgroundColor(colors.black)
		term.setCursorPos(1,ty-1)
		write("Edit: (")
		writeOptSelected("Value",optionsSelected == 1)
		write("/")
		writeOptSelected("Default",optionsSelected == 2)
		write(") ")
		writeOptSelected("Delete",optionsSelected == 3)
		writeOptSelected("Reset",optionsSelected == 4)
	else
		for y=page_scrolled*(ty-1),(page_scrolled+1)*(ty-1) do
			if(entryList[y])then
				term.setCursorPos(1,(y-page_scrolled*(ty-1)))
				if(y%2 == 1)then term.setBackgroundColor(colors.black) else term.setBackgroundColor(colors.gray) end
				if((page_scrolled*(ty-1) + scrolled) == y)then term.setBackgroundColor(colors.lightGray) end
				term.clearLine()
				write(string.sub((entryList[y].name..string.rep(" ",tx-12)),1,tx-12)..":  ")
				term.setCursorPos(tx-10,(y-page_scrolled*(ty-1)))
				write("["..type(entryList[y].value).."]")
			end
		end
	end
	term.setBackgroundColor(colors.black)
	term.setCursorPos(1,ty)
	term.clearLine()
	if(ctrlMenuOpen)then
		term.setTextColor(colors.white)
		for i=0,#ctrlOptions do
			writeOptSelected((i>0 and ctrlOptions[i] or (selected and "Back" or "Edit")),i == ctrlMenuSelected)
		end
	else
		term.setTextColor(colors.yellow)
		write("Press Ctrl to acess menu  ")
		term.setTextColor(colors.white)
		if(selected)then
		
		else
			write("Page:["..(page_scrolled+1).."/"..(math.floor((#entryList-1)/(ty-1))+1).."] Entry:["..(scrolled+page_scrolled*(ty-1)).."/"..(#entryList).."]")
		end
	end
	term.setTextColor(colors.white)
end


if(running)then
	for k,v in pairs(config.getAll()) do
		entryList[(#entryList + 1)] = {value = v,name = k}
	end
	for k,v in pairs(config.getAllDeafault()) do
		for i=1,#entryList do
			if(entryList[i].name == k)then
				entryList[i].default = v
			end
		end
	end
	if(search)then
		for i=1,#entryList do
			if(search == entryList[i].name)then
				scrolled = ((i-1)%(ty-1))+1
				page_scrolled = math.floor(((i-1)/(ty-1)))
			end
		end
	end
	draw()
	parallel.waitForAny(run)
end



config.save()
term.setCursorPos(1,1)
term.clear()
sleep(.1)