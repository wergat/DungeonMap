os.loadAPI(":dungeon/dcore/apis/dcore")
dcore.requireAPI("advitem")
dcore.requireAPI("items")

-- Hello Github!

-- Returns Table with currency data
function getCurrencyTable()
	local cur = {
		{["name"] = "Quaz",["value"] = 1,["itemID"] = "minecraft:quartz"},
		{["name"] = "Iron nugget",["value"] = 10,["itemID"] = "minecraft:ghast_tear"},
		{["name"] = "Iron Ingot",["value"] = 50,["itemID"] = "minecraft:iron_ingot"},
		{["name"] = "Gold Nugget",["value"] = 250,["itemID"] = "minecraft:gold_nugget"},
		{["name"] = "Gold Ingot",["value"] = 2500,["itemID"] = "minecraft:gold_ingot"},
		{["name"] = "Diamond",["value"] = 25000,["itemID"] = "minecraft:diamond"},
		{["name"] = "Emerald",["value"] = 250000,["itemID"] = "minecraft:emerald"},
		{["name"] = "Nether Star",["value"] = 1250000,["itemID"] = "minecraft:nether_star"}
	}
	return cur
end

-- Adds comma value to the given number
-- Copied with no shame from http://lua-users.org/wiki/FormattingNumbers
local function comma_value(amount)
	local formatted = amount
	while true do  
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", "%1'%2")
		if (k==0) then
			break
		end
	end
	return formatted
end

-- Returns [tradeSlots] amount of tables for currency you can use in villagers in tables
-- The NBT converter likes those tables
-- Requires price and amounts of slots to fill (1 or 2, depends on the amount of buy/sell slots)
-- Will round up if in doubt
function getCurrencyTradeTablesByPrice(price,tradeSlots)
	if(price<=0)then price = 1 end
	if(not tradeSlots)then tradeSlots = 1 end
	
	-- MUST be sorted by value!
	-- TODO: make sure that is the case?
	local cur = getCurrencyTable()
	local rawPrice = {}
	local maxRaw
	for i=#cur,1,-1 do
		while(price>=cur[i]["value"])do
			price = price - cur[i]["value"]
			rawPrice[i] = (rawPrice[i] or 0) + 1
			if(not maxRaw)then maxRaw = i end
		end
	end
	
	local tradeIndex = 1
	local resourceIndex = maxRaw
	local trade = {}
	
	while(tradeIndex<=tradeSlots and resourceIndex>=1)do
		while(not rawPrice[resourceIndex] and resourceIndex>1)do resourceIndex = resourceIndex - 1 end
		if(resourceIndex>=1 and rawPrice[resourceIndex])then
			local id = cur[resourceIndex]["itemID"]
			local amount = math.min(rawPrice[resourceIndex],64) -- Keep it in the limits!
			
			local tag = {}
			tag["display"] = {
				["Name"] = cur[resourceIndex]["name"],
				["Lore"] = {"This item is part of the currency","It is worth exactly "..SS(2)..comma_value(cur[resourceIndex]["value"])..SS("r")..SS("5")..SS("o").." quaz!"}
			}
			
			trade[tradeIndex] = {["id"] = id,["Count"] = amount,["tag"] = tag}
			rawPrice[resourceIndex] = rawPrice[resourceIndex] - 64
			if(rawPrice[resourceIndex]<=0)then rawPrice[resourceIndex] = nil resourceIndex = resourceIndex - 1 end
		end
		tradeIndex = tradeIndex + 1
	end
	-- Round up of the price (Deal with it!)
	if((rawPrice[#rawPrice] or 0)>0)then
		trade[#trade]["Count"] = math.min(trade[#trade]["Count"] + 1,64) -- Keep it in the limits!
	end
	return trade
end

-- Calculate even prices a human would use (100$ instead of 98.76$)
-- Now global, in case anyone wants to use this
function getEvenPrice(price)
	local i = 0
	local found = price
	local lowest_factor = 1.5
	 
	while i<(string.len(tostring(price))-1) do
		i = i + 1
		local upper = (tonumber(string.sub((price+(10^i)),1,-(i+1))..string.sub(string.rep("0",16),-i,-1)))
		local lower = (tonumber(string.sub((price),1,-(i+1))..string.sub(string.rep("0",16),-i,-1)))
		local lower_factor = (price/lower)
		local upper_factor = (upper/price)

		if(lower_factor<upper_factor)then
			if(price*(1-(math.floor((i/3)+2)/100))<lower and lower_factor<(lowest_factor*((i+1)/2)))then
				found = lower
				lowest_factor = lower_factor
			end
		end
			 
		if(upper_factor<lower_factor)then
			if(price*(1+(math.floor((i/3)+2)/100))>upper and upper_factor<(lowest_factor*((i+1)/2)))then
				found = upper
				lowest_factor = upper_factor
			end
		end
	end
	return found
end

-- Calculate real-shop like prices (99.99$ instead of 98.76$)
-- Now global, in case anyone wants to use this
function getShopPrice(price)
	local i = 0
	local found = price
	local lowest_factor = 1.5
	 
	while i<(string.len(tostring(price))-1) do
		i = i + 1
		local upper = (tonumber(string.sub(price,1,-(i+1))..string.sub(string.rep("9",16),-i,-1)))
		local lower = (tonumber(string.sub((price-(10^i)),1,-(i+1))..string.sub(string.rep("9",16),-i,-1)))
		local lower_factor = (price/lower)
		local upper_factor = (upper/price)

		if(lower_factor<upper_factor)then
			if(price*(1-(math.floor((i/2)+3)/100))<lower and lower_factor<(lowest_factor*((i+1)/2)))then
				found = lower
				lowest_factor = lower_factor
			end
		end
			 
		if(upper_factor<lower_factor)then
			if(price*(1+(math.floor((i/2)+3)/100))>upper and upper_factor<(lowest_factor*((i+1)/2)))then
				found = upper
				lowest_factor = upper_factor
			end
		end
	end
	return found
end

local customVillagerTypes = {}
function registerCustomVillagerType(name,func)
	customVillagerTypes[name] = func
end
function getCustomVillagerFunction(name)
	return customVillagerTypes[name]
end

registerCustomVillagerType("currency",function(self)
	local cur = getCurrencyTable()
	for i=1,#cur-1 do
		local trade = newTrade():setSellToMoney(cur[i+1]["value"])
		local buyItem = getCurrencyTradeTablesByPrice(cur[i]["value"],1)[1]
		buyItem.Count = math.floor(cur[i+1]["value"]/cur[i]["value"])
		self:addTrade(trade:setBuy(buyItem))
	end
	for i=#cur,2,-1 do
		local trade = newTrade():setBuyToMoney(cur[i]["value"])
		local sellItem = getCurrencyTradeTablesByPrice(cur[i-1]["value"],1)[1]
		sellItem.Count = math.floor(cur[i]["value"]/cur[i-1]["value"])
		self:addTrade(trade:setSell(sellItem))
	end
	self:addBlocker()
	self.name = 'Exchange'
	self.profession = 1
	return self
end)
registerCustomVillagerType("equipment",function(self,argLevel) 			
	local level = 0
	local difficulty = argLevel or 1
	local amountOfTrades = math.random(2,60)+math.floor(difficulty/10)
	for i=1,amountOfTrades do
		repeat
			local item = advitem.newItem{itemLevel = difficulty+5}
			local itemTable = item:autoNBT()
			if(item:isValid())then -- If we got an item
				local trade = newTrade():setBuyToMoney(getShopPrice(tonumber(item.price)))
				level = level + item.value
				itemTable["Count"] = 1
				trade:setSell(itemTable)
				self:addTrade(trade)
			else
				difficulty = difficulty + 1
			end
		until item:isValid()
	end
	self:addBlocker()
	self.name = 'Level '..math.floor(((level/amountOfTrades)+0.5)/100)..' Trader'
	return self 
end)
registerCustomVillagerType("food",function(self)
	local foodItems = items.getAllItemsOfType("food")
	-- Easy way to change if food is cheap or expensive
	local foodPriceMulti = 0.5
	local amountOfTrades = math.random(4,9)
	local trades = {}
	local i = 1
	while (i<=amountOfTrades and #foodItems>0) do
		i = i + 1
		local item = items.getItem(foodItems[math.random(#foodItems)])
		local priceEach = (item["foodPoints"] + item["saturation"] + (math.random(7)/5))*foodPriceMulti+(math.random(7)/2)
		local sellAmount = math.floor(math.random(15)/2 + 1)
		local price = (priceEach*sellAmount)+(math.random(11)/2)
		local pointer = 1
		while (trades[pointer]) and (trades[pointer]["totalPrice"] < price)do
			pointer = pointer + 1
		end
		local newTrade = {}
		for j=1,(#trades+1) do
			if(j < pointer)then
				newTrade[j] = trades[j]
			elseif(j == pointer)then
				newTrade[j] = {amount = sellAmount,id = item["id"],totalPrice = price}
			else
				newTrade[j] = trades[(j-1)]
			end
		end
		trades = newTrade
	end
			
	local i = 1
	while i <= #trades do
		local j = 1
		while j <= #trades and trades[i] do
			if(i~=j)then
				if(trades[i].amount == trades[j].amount and trades[i].id == trades[j].id)then
					table.remove(trades,j)
				end
			end
			j = j + 1
		end
		i = i + 1
	end
			
	for i=1,#trades do
		local trade = newTrade()
		trade:setBuyToMoney(math.floor(trades[i]["totalPrice"]))
		trade:setMaxUses(math.random(3,55))
		trade:setSell{["id"] = trades[i]["id"],["Count"] = trades[i]["amount"]}
		self:addTrade(trade)
	end

	self:addBlocker()
	self.profession = 0
	self.name = "Food Merchant"	
	return self
end)
registerCustomVillagerType("music",function(self)
	self:addTrade(newTrade():setBuyToMoney(10000):setSell({["id"] = "minecraft:record_ward",["Count"] = 1}))
	self:addTrade(newTrade():setBuyToMoney(10000):setSell({["id"] = "minecraft:record_blocks",["Count"] = 1}))
	self:addTrade(newTrade():setBuyToMoney(10000):setSell({["id"] = "minecraft:record_chirp",["Count"] = 1}))
	self:addTrade(newTrade():setBuyToMoney(1000):setSell({["id"] = "minecraft:jukebox",["Count"] = 1,["tag"] = {["display"] = {["Lore"] = {"Plays music."}}, ["CanPlaceOn"] = {"minecraft:dirt", "minecraft:stone", "minecraft:stonebrick", "minecraft:planks"}}}))
	self:addTrade(newTrade():setBuyToMoney(1000):setSell({["id"] = "minecraft:iron_axe",["Count"] = 1,["tag"] = {["display"] = {["Name"] = "Jukebox Breaker", ["Lore"] = {"Destroys placed jukeboxes"}}, ["CanDestroy"] = {"minecraft:jukebox"}}}))
	self:addBlocker()
	self.profession = 5
	self.name = "Music Trader"
	return self
end)
registerCustomVillagerType("trash",function(self)
	local trades = {
		{["id"] = "minecraft:gunpowder",["price"] = 30},
		{["id"] = "minecraft:bone",["price"] = 13},
		{["id"] = "minecraft:ender_pearl",["price"] = 67},
		{["id"] = "minecraft:slime_ball",["price"] = 34},
		{["id"] = "minecraft:arrow",["price"] = 1},
		{["id"] = "minecraft:rotten_flesh",["price"] = 2},
		{["id"] = "minecraft:dye",["price"] = 3},
		{["id"] = "minecraft:reeds",["price"] = 5},
		{["id"] = "minecraft:sugar",["price"] = 3},
		{["id"] = "minecraft:paper",["price"] = 4},
		{["id"] = "minecraft:torch",["price"] = 1},
		{["id"] = "minecraft:coal",["price"] = 3},
		{["id"] = "minecraft:stick",["price"] = 3},
		{["id"] = "minecraft:flint",["price"] = 1},
		{["id"] = "minecraft:wheat",["price"] = 1},
		{["id"] = "minecraft:wheat_seeds",["price"] = 1},
		{["id"] = "minecraft:string",["price"] = 2},
		{["id"] = "minecraft:bowl",["price"] = 10},
		{["id"] = "minecraft:feather",["price"] = 3},
		{["id"] = "minecraft:spider_eye",["price"] = 20},
	}
	for i=1,#trades do
		self:addTrade(newTrade():setSellToMoney(trades[i]["price"]):setBuy({["id"] = trades[i]["id"],["Count"] = 1}))
	end
	
	self:addBlocker()
	self.profession = 1
	self.name = "Item Buyer"
	return self
end)
--registerCustomVillagerType("",function(self) return self end)

-- Trade Object
function newTrade()
	local tradeObject = {}
	tradeObject.rewardExp = false
	tradeObject.maxUses = 9999999
	tradeObject.uses = 0
	tradeObject.buy = nil
	tradeObject.buyB = nil
	tradeObject.sell = nil
	tradeObject.isObject = true
	
	tradeObject.setMaxUses = function(self,v)
		self.maxUses = v
		return self
	end
	
	tradeObject.isValid = function(self)
		return self.buy and self.sell
	end
	tradeObject.setBuy = function(self,item)
		self.buy = item
		return self
	end
	tradeObject.setBuyB = function(self,item)
		self.buyB = item
		return self
	end
	tradeObject.setSell = function(self,item)
		self.sell = item
		return self
	end
	
	tradeObject.setBuyToMoney = function(self,price)
		local buyTable = getCurrencyTradeTablesByPrice(price,2)
		self.buy = buyTable[1]
		if(buyTable[2])then self.buyB = buyTable[2] end
		return self
	end
	
	tradeObject.setSellToMoney = function(self,price)
		self.sell = getCurrencyTradeTablesByPrice(price,1)[1]
		return self
	end
	
	tradeObject.getNBT = function(self)
		return {
			rewardExp = self.rewardExp,
			maxUses = self.maxUses,
			uses = self.uses,
			buy = self.buy,
			buyB = self.buyB,
			sell = self.sell
		}
	end
	
	return tradeObject
end



-- Villager Object
function new(args)
	local villagerObject = {}

	villagerObject.trades = {}
	villagerObject.profession = 0
	villagerObject.name = ""
	villagerObject.customNameVisible = true
	villagerObject.noAI = false
	
	villagerObject.setName = function(self,newName)
		self.name = newName
		return self
	end
	
	villagerObject.setProfession = function(self,prof)
		self.profession = prof
		return self
	end
	
	-- Adds a trade to the villager
	villagerObject.addTrade = function(self,tradeObject)
		if(tradeObject.isObject)then
			self.trades[#self.trades+1] = tradeObject:getNBT()
		else
			self.trades[#self.trades+1] = tradeObject
		end
		return self
	end
	
	villagerObject.addBlocker = function(self)
		return self:addTrade(newTrade():setBuy({["id"] = "minecraft:barrier",["Count"] = 1}):setSell({["id"] = "minecraft:barrier",["Count"] = 1}))
	end
	
	-- Finishing the Villager
	villagerObject.getNBT = function(self)
		return {
			["PersistenceRequired"] = "1b",
			["CustomNameVisible"] = self.customNameVisible,
			["CustomName"] = self.name,
			["NoAI"] = self.noAI or false,
			["Profession"] = self.profession,
			["Offers"] = {
				 ["Recipes"] = self.trades
			}
			
		}
	end
	villagerObject.getSummonCommand = function(self,x,y,z)
		return "/summon Villager "..x.." "..y.." "..z.." "..dcore.getNBTStringFromTable(self:getNBT())
	end
	villagerObject.summon = function(self,x,y,z)
		return commands.exec(self:getSummonCommand(x,y,z))		
	end
	
	villagerObject.setCustomType = function(self,name,...)
		local f = getCustomVillagerFunction(name)
		if(f)then
			local newSelf = f(self,unpack(arg))
			if(newSelf)then
				self = newSelf
			end
		end
		return self
	end
	
	-- Args evaluation
	if(type(args) == "string")then
		villagerObject:setCustomType(args)
	end
	if(type(args) == "table")then
		villagerObject.trades = args.trades or {}
		villagerObject.profession = args.profession or 0
		villagerObject.name = args.name or ""
		villagerObject.customNameVisible = args.customNameVisible or true
		villagerObject.noAI = args.noAI or false
		if(args.customType)then
			villagerObject:setCustomType(args.customType)
		end
	end
	
	return villagerObject
end






-- Tell atenefyr to switch to the newer use of things
function summon_food(...)
	print("USE villager.summon(\"food\",...) instead of villager.summon_food(...) !!!")
	return summon("food",unpack(arg))
end
function summon_currency(...)
	print("USE villager.summon(\"currency\",...) instead of villager.summon_currency(...) !!!")
	return summon("currency",unpack(arg))
end
function summon_music(...)
	print("USE villager.summon(\"music\",...) instead of villager.summon_music(...) !!!")
	return summon("music",unpack(arg))
end



-- Atenefyr's special difficulty distribution
local function generateDifficulty()
	local stage = math.random(1,170)
	if stage <= 50 then --Lowest stage. Pretty rare. 1-50
		difficulty = math.random(1,20)
	elseif stage >= 51 and stage <= 120  then --Second to lowest stage. Pretty rare, but more common than lowest. 51-120
		difficulty = math.random(21,40)
	elseif stage >= 121 and stage <= 160  then --Medium stage. Not hard to find, but not exactly "common". 121-160
		difficulty = math.random(41,100)
	elseif stage >= 161 and stage <= 170 then --High stage. Very rare. 161-170
		difficulty = math.random(100,200)
	else --Backup for high stage
		difficulty = math.random(100,200)
	end
	return difficulty
end









function summon(...)
	local tArgs = arg
	if(type(tArgs[1]) == "number")then
		print("WARNING: Summon now uses the type of villager as the first parameter, change something somewhere!")
		table.insert(tArgs,1,nil)
	end
	
	-- ///////////////////
	local villagerTable = {}
	local trades = {}
	-- ///////////////////
	
	-- ///////////////////
	local villagerType = tArgs[1] or "equipment"
	local xPos = tArgs[2] or 0
	local yPos = tArgs[3] or 23
	local zPos = tArgs[4] or 0
	local difficulty = tArgs[5] or generateDifficulty()+4000
	local amountOfTrades = tArgs[6] or 10
	local coat = tArgs[7] or 1
	local villagerName = ""
	-- ///////////////////

	if(villagerType == "equipment")then
		local tradeLevel = 0
		for i = 1,amountOfTrades do
			math.randomseed(i+yPos*difficulty+amountOfTrades)
			repeat
				local itemTable,info = advitem.getEquipment(difficulty,nil,"player",1)
				if(info)then -- If we got an item
					local trade = {}				
					local itemPrice = getShopPrice(tonumber(info["price"]))
					tradeLevel = tradeLevel + info["value"]		
					local buy,buyB = getCurrencyTradeTablesByPrice(itemPrice,2)
					trade["buy"] = buy
					if(buyB)then trade["buyB"] = buyB end
					trade["maxUses"] = 9999999
					trade["rewardExp"] = "false"
					trade["sell"] = itemTable
					table.insert(trades,trade)
				else
					difficulty = difficulty + 1
				end
			until (info)
		end
		villagerName = 'Level '..math.floor((tradeLevel/amountOfTrades)+0.5)..' Trader'
	elseif(villagerType == "currency")then
		villagerName = 'Exchange'
		coat = 1
		local cur = getCurrencyTable()
		for i=1,#cur-1 do
			local trade = {}
			local buy = getCurrencyTradeTablesByPrice(cur[i]["value"],1)
			local sell = getCurrencyTradeTablesByPrice(cur[i+1]["value"],1)
			trade["buy"] = buy
			trade["buy"]["Count"] = math.floor(cur[i+1]["value"]/cur[i]["value"])
			trade["sell"] = sell
					
			trade["maxUses"] = 999999
			trade["rewardExp"] = "false"		
			
			table.insert(trades,trade)
		end
		for i=#cur,2,-1 do
			local trade = {}
			local buy = getCurrencyTradeTablesByPrice(cur[i]["value"],1)
			local sell = getCurrencyTradeTablesByPrice(cur[i-1]["value"],1)
			trade["buy"] = buy
			trade["sell"] = sell
			trade["sell"]["Count"] = math.floor(cur[i]["value"]/cur[i-1]["value"])
			
			trade["maxUses"] = 999999
			trade["rewardExp"] = "false"
			
			table.insert(trades,trade)
		end
	elseif(villagerType == "trash")then
		villagerName = "Item Buyer"
		local function getprice(id)
			if id < 302 and id > 297 then
				return 50
			elseif id < 318 and id > 313 then
				return 100
			elseif id < 310 and id > 301 then
				return 1000
			elseif id == 268 or id == 272 or id == 283 then
				return 50
			elseif id == 261 or id == 267 then
				return 1000
			else
				return 2000
			end
		end
		local weapons = {261, 267, 268, 272, 276, 283}
		local id = 298
		repeat
			local quaz = getprice(id)
			table.insert(trades,{["buy"] = {["id"] = id,["Count"] = 1},["maxUses"] = 9999999,["sell"] = getCurrencyTradeTablesByPrice(quaz,1),["rewardExp"] = false})
			id = id + 1
		until id == 318
		local i = 0
		repeat
			i = i + 1
			local id = weapons[i]
			local quaz = getprice(id)
			table.insert(trades,{["buy"] = {["id"] = id,["Count"] = 1},["maxUses"] = 9999999,["sell"] = getCurrencyTradeTablesByPrice(quaz,2),["rewardExp"] = false})
			id = id + 1
		until i == #weapons
	elseif(villagerType == "music")then
		coat = 5
		table.insert(trades,{["buy"] = getCurrencyTradeTablesByPrice(25000,2),["maxUses"] = 9999999,["sell"] = {["id"] = 2265,["Count"] = 1},["rewardExp"] = false})
		table.insert(trades,{["buy"] = getCurrencyTradeTablesByPrice(12000,2),["maxUses"] = 9999999,["sell"] = {["id"] = 2258,["Count"] = 1},["rewardExp"] = false})
		table.insert(trades,{["buy"] = getCurrencyTradeTablesByPrice(37213,2),["maxUses"] = 9999999,["sell"] = {["id"] = 2259,["Count"] = 1},["rewardExp"] = false})
		villagerName = "Music Trader"
	elseif(villagerType == "food")then
		math.randomseed(yPos*difficulty+amountOfTrades)
		local foodItems = items.getAllItemsOfType("food")
		
		local foodPriceMulti = 0.5
		
		local i = 1
		while (i<=amountOfTrades and #foodItems>0) do
			local trade = {}
			local item = items.getItem(foodItems[math.random(#foodItems)])
			local priceEach = math.floor((item["foodPoints"] + item["saturation"] + (math.random(10)/5))*foodPriceMulti)
			
			local sellAmount = math.floor(math.random(10)/2 + 1)
			
			
			local buy,buyB = getCurrencyTradeTablesByPrice(priceEach*sellAmount,2)
			trade["buy"] = buy
			if(buyB)then trade["buyB"] = buyB end
			
			trade["maxUses"] = math.random(15,55)
			trade["rewardExp"] = "false"
			trade["sell"] = {["id"] = items.useRightItemIDForVillager(item["id"]),["Count"] = sellAmount}
			
			table.insert(trades,trade)
			i = i + 1
		end
		coat = 0
		villagerName = "Food Merchant"
	end
	
	-- Prevent New Trades
	table.insert(trades,{["maxUses"] = 99999,["rewardExp"] = "false",["buy"] = {["id"] = 160,["Damage"] = 8,["Count"] = 1,["tag"] = {["display"] = {["Name"] = " "}}},["sell"] = {["id"] = 160,["Damage"] = 8,["Count"] = 1,["tag"] = {["display"] = {["Name"] = " "}}}})
	
	villagerTable["Profession"] = coat
	villagerTable["CustomName"] = villagerName
	villagerTable["CustomNameVisible"] = 0
	villagerTable["PersistenceRequired"] = "1b"
	villagerTable["Offers"] = {}
	villagerTable["Offers"]["Recipes"] = trades
	
	local cmd = "/summon Villager " .. xPos .. " " .. yPos .. " " .. zPos .. " "..dcore.getNBTStringFromTable(villagerTable)
	local _r = commands.exec(cmd)
	return _r, cmd
end

--[[

function summon(xc,yc,zc,difficulty,trades,coat)
	sleep(1)
	local xc = xc or 0
	local yc = yc or 23
	local zc = zc or 0
	--local difficulty = difficulty+5
	if not difficulty then
		difficulty = generateDifficulty()
	end
	if not trades then
		trades = 1
	end

	local trade = {}
	for i = 1, trades do
		local idt, mi = advitem.getEquipment(difficulty,nil,"player",1)
		if idt["tag"] then
			local r = idt.tag.display.Lore[2]
			local a = r:gsub('"Price is exactly ', "")
			a = a:gsub(' gold"', "")
			local n = getShopPrice(tonumber(a))
			a = '"Price is about ' .. n .. ' gold"'
			idt.tag.display.Lore[2] = a
			local y = n / 1000
			local iron = (n % 1000)/50
			local buyB = ""
			if iron ~= 0 and y > 1 then
				buyB = "buyB:{id:265,Count:" .. iron .. "},"
			end
			local id = 264
			if y < 1 and n / 50 <= 64 then
				y = n / 50
				id = 265
			elseif y < 1 and n / 150 <= 64 then
				y = n / 150
				id = 266
			elseif y > 64 and n / 5000 <= 64 then
				y = n / 5000
				id = 388
			elseif y > 64 and n / 9000 <= 64 then
				y = n / 9000
				id = 57
			elseif y > 64 and n / 45000 <= 64 then
				y = n / 45000
				id = 133
			elseif n >= 2880000 then
				y = 64
				id = 133
			end
			y = math.floor(y)
			trade[#trade+1] = "{buy:{id:" .. id .. ",Count:" .. y .. "}," .. buyB .. "maxUses:999999,sell:{id:" .. idt.id .. ",Count:1,tag:" .. dcore.getNBTStringFromTable(idt.tag) .. "},rewardExp:false}"
		else
			return summon(xc,yc,zc,difficulty,trades,coat)	
		end
	end
	sleep(0.1)
	local tstr = ""
	for k, v in pairs(trade) do
		tstr = tstr .. v .. ","
	end
	tstr = tstr:sub(1,-2)
	local cmd = "/summon Villager " .. xc .. " " .. yc .. " " .. zc .. " {Profession:" .. coat .. ",CustomName:\"Level " .. math.floor(difficulty+0.5) .. " Trader\",CustomNameVisible:0,Offers:{Recipes:[" .. tstr .. "]}}"
	sleep(0.1)
	local _r = commands.exec(cmd)
	return _r, cmd
end
function summon_currency(x,y,z)
	local cmd = '/summon Villager ' .. x .. " " .. y .. " " .. z .. ' {Profession:1,CustomName:"Currency Trader",CustomNameVisible:0,CanPickUpLoot:0,Offers:{Recipes:[{buy:{id:41,Count:1},maxUses:9999999,sell:{id:388,Count:1},rewardExp:false},{buy:{id:264,Count:5},maxUses:9999999,sell:{id:388,Count:1},rewardExp:false},{buy:{id:388,Count:1},maxUses:9999999,sell:{id:264,Count:5},rewardExp:false},{buy:{id:264,Count:1},maxUses:9999999,sell:{id:265,Count:20},rewardExp:false},{buy:{id:265,Count:20},maxUses:9999999,sell:{id:264,Count:1},rewardExp:false},{buy:{id:388,Count:1},maxUses:9999999,sell:{id:41,Count:1},rewardExp:false}]}}'
	commands.exec(cmd)
	return true, cmd
end

local items = {260, 282, 297, 320, 322, 350, 354, 357, 360, 364, 366, 391, 393, 396, 400}
local item_price = {1, 2, 1, 2, 4, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1}
local item_count = {4, 1, 4, 4, 1, 2, 1, 10, 20, 2, 2, 3, 8, 1, 2}
local item_lore = {"", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}
local item_force = {}
if http.get("http://www.timeapi.org/utc/now?%25b") then
	local month = http.get("http://www.timeapi.org/utc/now?%25b").readAll()
	if month == "Oct" then --Pumpkin Pie: 50% discount during October!
		item_count[#item_count] = 4
		item_lore[#item_lore] = "50% off for the month of October!"
		item_force[400] = true
	end
end

local function get_food_item(past_items)
	local x = math.random(#items)
	while past_items[x] do
		x = math.random(#items)
		if item_force[x] then
			return get_food_item(past_items)
		end
	end
	return x
end

function summon_food(x,y,z)
	local trades = {}
	local tstr = ""
	local past_items = {}
	for i = 1, 3 do
		local x = get_food_item(past_items)
		local ct = "{buy:{id:264,Count:" .. item_price[x] .. "},maxUses:999999,sell:{id:"
		ct = ct .. items[x] .. ",Count:" .. item_count[x]
		if item_lore[x] ~= "" then
			ct = ct .. ", tag:{display:{Lore:[\"" .. item_lore[x] .. "\"]}}},rewardExp:false}"
		else
			ct = ct .. "},rewardExp:false}"
		end
		trades[#trades+1] = ct
		past_items[x] = true
	end
	for i = 1, #item_force do
		local x = item_force[i]
		local ct = "{buy:{id:264,Count:" .. item_price[x] .. "},maxUses:999999,sell:{id:"
		ct = ct .. items[x] .. ",Count:" .. item_count[x]
		if item_lore[x] ~= "" then
			ct = ct .. ", tag:{display:{Lore:[\"" .. item_lore[x] .. "\"]}}},rewardExp:false}"
		else
			ct = ct .. "},rewardExp:false}"
		end
		trades[#trades+1] = ct
	end
	for i = 1, #trades do
		tstr = tstr .. trades[i] .. ", "
	end
	tstr = tstr:sub(1,-2)
	local cmd = "/summon Villager " .. x .. " " .. y .. " " .. z .. " {Profession:0,CustomName:\"Food Trader\",CustomNameVisible:0,Offers:{Recipes:[" .. tstr .. "]}}"
	commands.exec(cmd)
end

function summon_music(x,y,z)
	local cmd = '/summon Villager ' .. x .. " " .. y .. " " .. z .. ' {Profession:5,CustomName:"Music Trader",CustomNameVisible:0,CanPickUpLoot:0,Offers:{Recipes:[{buy:{id:264,Count:3},maxUses:9999999,sell:{id:2265,Count:1},rewardExp:false},{buy:{id:264,Count:2},maxUses:9999999,sell:{id:2258,Count:1},rewardExp:false},{buy:{id:264,Count:2},maxUses:9999999,sell:{id:2259,Count:1},rewardExp:false}]}}'
	commands.exec(cmd)
	return true, cmd
end

local function getprice(id)
	if id < 302 and id > 297 then
		return 1, 265
	elseif id < 318 and id > 313 then
		return 2, 265
	elseif id < 310 and id > 301 then
		return 1, 264
	elseif id == 268 or id == 272 or id == 283 then
		return 1, 265
	elseif id == 261 or id == 267 then
		return 1, 264
	else
		return 2, 264
	end
end

local function getprice(id)
	if id < 302 and id > 297 then
		return 1, 265
	elseif id < 318 and id > 313 then
		return 1, 265
	elseif id < 310 and id > 301 then
		return 1, 265
	elseif id == 268 or id == 272 or id == 283 then
		return 1, 265
	elseif id == 261 or id == 267 then
		return 1, 265
	else
		return 1, 264
	end
end

local weapons = {261, 267, 268, 272, 276, 283}
function summon_sell(x, y, z)
	local id = 298
	local trades = {}
	repeat
		local count, idx = getprice(id)
		local ct = "{buy:{id:" .. id .. ",Count:1},maxUses:999999,sell:{id:" .. idx .. ",Count:" .. count .. "},rewardExp:false}"
		trades[#trades+1] = ct
		id = id + 1
	until id == 318
	
	local key = 1
	repeat
		local count, idx = getprice(weapons[key])
		local ct = "{buy:{id:" .. weapons[key] .. ",Count:1},maxUses:999999,sell:{id:" .. idx .. ",Count:" .. count .. "},rewardExp:false}"
		trades[#trades+1] = ct
		key = key + 1
	until key == #weapons+1
	
	local tstr = ""
	for i = 1, #trades do
		tstr = tstr .. trades[i] .. ", "
	end
	tstr = tstr:sub(1,-2)
	local cmd = "/summon Villager " .. x .. " " .. y .. " " .. z .. " {Profession:5,CustomName:\"Item Seller\",CustomNameVisible:0,Offers:{Recipes:[" .. tstr .. "]}}"
	commands.exec(cmd)
end

]]
