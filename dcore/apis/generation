os.loadAPI(":dungeon/dcore/apis/dcore")
dcore.requireAPI("gendata")

-- Set the Seed
SEED = 12345

-- Set the Sub-Seed
math.randomseed(SEED)
local SUBSEED = math.random(10000)

local chunkSizeX = math.random(15,25)
local chunkSizeY = math.floor(375/chunkSizeX)







function getBiomeByPosition(x,y,level)
	local xinchunk = x%chunkSizeX -- X Position in 0/0 chunk
	local yinchunk = y%chunkSizeY -- Y Position in 0/0 chunk
	
	local lowest_distance = 200
	local lowest_distance_biome = 0
	
	local l = gendata.getBiomesOnLevel(level) or {}
	for b=1,#l do
		for xFactor=-1,1 do
			for yFactor=-1,1 do
				math.randomseed(getRandomSeedForBiome(x,y,xFactor,yFactor,b,level))
				local biomecenterx = math.random(chunkSizeX)+(chunkSizeX*xFactor) -- X center of biome b in Chunk xfactor/yfactor relative to 0/0 chunk
				local biomecentery = math.random(chunkSizeY)+(chunkSizeY*yFactor) -- Y center of biome b in Chunk xfactor/yfactor relative to 0/0 chunk
				--local distance = math.abs(xinchunk - biomecenterx) + math.abs(yinchunk - biomecentery)
				--
				local distance = math.sqrt((xinchunk - biomecenterx)^2 + (yinchunk - biomecentery)^2)
				if(distance < lowest_distance)then
					lowest_distance = distance
					lowest_distance_biome = b
				end
			end
		end
	end
	return l[lowest_distance_biome]
end

local noiseCache = {}
function getNoiseByPosition(x,y)
	if(not noiseCache[x])then noiseCache[x] = {} end
	if(not noiseCache[x][y])then
		math.randomseed(SEED+((x+SUBSEED)*y)+(y*4))
		local t = math.random(56)/10
		noiseCache[x][y] = t
		return t
	else
		return noiseCache[x][y]
	end
end

local heightCache = {}
function getHeightByPosition(x,y)
	if(not heightCache[x])then heightCache[x] = {} end
	if(not heightCache[x][y])then
		local corners = (generation.getNoiseByPosition(x-1,y-1)+ generation.getNoiseByPosition(x+1, y-1)+ generation.getNoiseByPosition(x-1, y+1)+ generation.getNoiseByPosition(x+1, y+1) ) * 0.125
		local sides   = (generation.getNoiseByPosition(x-1,y)  + generation.getNoiseByPosition(x+1, y)  + generation.getNoiseByPosition(x, y-1)  + generation.getNoiseByPosition(x, y+1) ) * 0.25
		local center  =  generation.getNoiseByPosition(x, y) * 0.5
		local noise = math.floor((corners + sides + center)*0.5)
		heightCache[x][y] = noise
		return noise
	else
		return heightCache[x][y]
	end
end
function getEffectiveHeightOfPillar(x,y)
	return getHeightByPosition(x,y) + 1
end
function getVerticalConnection(x,z)
	local height = getEffectiveHeightOfPillar(x,z)
	local conData = nil
	math.randomseed(generation.giveSeed(x,z))
	local bottom = 0
	local top = 0
	-- 1 in 6 chance for stairs/hole
	if(math.random(6)==1)then
		bottom = math.random(math.floor(height*0.5+0.5))
		top = math.random(bottom,height)+1
		-- 2 in 3 chance for stairs, all other are holes
		if(math.random(3)>1)then
			conData = "stairs"
		else
			conData = "hole"
		end
	end
	return conData,bottom,top
end

function newRoom(x,y,z)
	return {
		biome = getBiomeByPosition(x,z,y),
		roomData = {hasChest = false},
		init = function(self)
			self.roomType = math.random(4)
		end,
		spawn = function(self,x,y,z)
			
		end
	}
end

function newPillar(x,y)
	local pillarObject = {
		height = getEffectiveHeightOfPillar(x,y),
		rooms = {},
		init = function(self)
			local v,s,e = getVerticalConnection(x,y)
			for i=1, self.height do
				local room = newRoom(x,i,y)
				if((v) and i >= s and i <= e)then
					room.roomData.vCon = {
						up = (i >= s and i < e),
						down = (i <= e and i > s),
						conType = v
					}
				end
				room:init()
				self.rooms[i] = room
			end
		end,
		spawn = function(self,x,y,z)
			
		end
	}
	return pillarObject
end

function newTopping(x,y,z,conType)
	return {
		x = x,y = y,z = z,conType = conType,conPattern = 1,
		biome = getBiomeByPosition(x,z,y),
		conData = {hasChest = false},
		init = function(self)
			self.conPattern = math.random(3)
		end,
		spawn = function(self,x,y,z)
			
		end
	}
end


-- Flat thing ontop of the pillar
function isRoomSetup(a,h)
	local returnValue = true
	for i=1,#a do
		local b = a[i]
		if(b[1]==-1)then if(not (b[2]<=h))then returnValue = false end end
		if(b[1]==0)then if(not (b[2]<h))then returnValue = false end end
		if(b[1]==1)then if(not (b[2]==h))then returnValue = false end end
		if(b[1]==2)then if(not (b[2]>h))then returnValue = false end end
	end
	return returnValue
end
local cornerData = {
	["flat"] = {-1,-1,-1,-1},
	["1se"] = {-1,-1,2,-1},
	["1ne"] = {-1,2,-1,-1},
	["1sw"] = {-1,-1,-1,2},
	["1nw"] = {2,-1,-1,-1},
	["2e"] = {-1,2,2,-1},
	["2w"] = {2,-1,-1,2},
	["2s"] = {-1,-1,2,2},
	["2n"] = {2,2,-1,-1},
	["2yb"] = {-1,2,-1,2},
	["2ac"] = {2,-1,2,-1},
	["3sw"] = {2,-1,2,2},
	["3ne"] = {2,2,2,-1},
	["3se"] = {-1,2,2,2},
	["3nw"] = {2,2,-1,2}
}
function getRightCorner(y,a,b,c,h)
	for k,v in pairs(cornerData) do
		if(isRoomSetup({{v[1],y},{v[2],a+1},{v[3],b+1},{v[4],c+1}}))then
			return k
		end
	end
end
local sideData = {
	"wideX",
	"wideZ",
	"wideX",
	"wideZ"
}
function getRightSide(a,y)
	for i=1,4 do
		if(a[i]<y)then
			return sideData[i]
		end
	end
end


-- Egde:
-- +  A | B 
-- ^ -- + --
-- X  Y | C
-- - Z -> +

function spawnToppings(x,y,z)
	local tx = base["x"]+(x*20)-7
	local ty = base["y"]+(y-1)*9
	local tz = base["z"]+(z*20)-7
	
	local a_height = getEffectiveHeightOfPillar(x+1,z)
	local b_height = getEffectiveHeightOfPillar(x+1,z+1)
	local c_height = getEffectiveHeightOfPillar(x,z+1)
	
	local max_height = (math.max(a_height,b_height,c_height,(y-1))+1)
	
	local toppings = {}
	for l = (math.min(a_height,b_height,c_height,(y-1))+1),max_height do
		-- Corners
		toppings[#toppings+1] = newTopping((tx+15),(base["y"]+(l-1)*9),(tz+15),getRightCorner(y,a_height,b_height,c_height,l))
		-- Broad (flat) connections
		toppings[#toppings+1] = newTopping((tx+15),(base["y"]+(l-1)*9),(tz+15),getRightSide({a_height,c_height,getEffectiveHeightOfPillar(x-1,z)+1,getEffectiveHeightOfPillar(x,z-1)+1},y))
	end
end







--[[

-- To be excluded later, GL HF WITH THAT ONE!
settings["heightMax_ruins"] = 14
settings["generationBaseHeight_ruins"] = 3
settings["generationHeightMax_ruins"] = 8.4
-- move this to boss-dlc
-- Boss room has a chance of bossRoomChance_Small in bossRoomChance_Big
settings["bossRoomChance_Big"] = 20 
settings["bossRoomChance_Small"] = 1




settings["chunkSizeX"] = math.random(15,25)
settings["chunkSizeY"] = math.floor(375/settings["chunkSizeX"])



function setSetting(settingName,value)
 settings[settingName] = value
end

function getSetting(settingName)
 return settings[settingName]
end

]]

-- returns the start and ending POSITION of the vertical connection (aka Stairs and holes) as y coords
-- requires the X and Z coordinates of the pillar you are looking at
function getVerticalConnectionBottomAndTop(x,z)
 local height = generation.getEffectiveHeightOfPillar(x,z)
 math.randomseed(settings["seed"]+(((x*3-3)+data["subSeed"])*(z-13))+(z*-2))
 local bottom = math.random(math.floor(height/2+0.5))
 local top = math.random(bottom+1,height)
 return bottom,top
end

-- returns the TYPE of the vertical connection (aka Stairs and holes)
-- requires the X and Z coordinates of the pillar you are looking at



-- Used for calculations and stuff!
local function positive(num) if(num<0)then return num*-1 else return num end end

-- Confusing function used for the generation
-- B is the biome ID,
function getRandomSeedForBiome(x,y,xfactor,yfactor,b,level)
	local realXPos = x+(chunkSizeX*xfactor)
	local realYPos = y+(chunkSizeY*yfactor)
	local realXChunkPos = math.floor(realXPos/chunkSizeX)
	local realYChunkPos = math.floor(realYPos/chunkSizeY)
	
	local partA = realXChunkPos*(SEED%(21)+(level))+(12*(SUBSEED%34))
	local partB = realYChunkPos*(SEED%(17+(level)))+(34*(SUBSEED%12))
	return (partA*b+level)+(partB*level)-realXChunkPos
end 

-- X = Height position
-- Y = Width position
-- level = height position (Minecraft-Y-coordinate)



function setSeed(_seed)
 settings["seed"] = _seed
 math.randomseed(settings["seed"])
 generation.data["subSeed"] = math.random(10000)
 settings["chunkSizeX"] = math.random(15,25)
 settings["chunkSizeY"] = math.floor(375/settings["chunkSizeX"])
end

function getRoomsBiomeByPostion(x,y,z)
 return generation.getBiomeByPosition(x,z,y)
end

-- HEIGHT GENERATION




-- API functions
function setSeed(_seed)
 settings["seed"] = _seed
 math.randomseed(settings["seed"])
 setting["subSeed"] = math.random(10000)
 chunk_sizeX = math.random(15,25)
 chunk_sizeY = math.floor(375/chunk_sizeX)
end
function getChunkSize()
 return chunk_sizeX,chunk_sizeY
end
function getSeed()
 return settings["seed"]
end
-- returns a seed generated with the args given

function giveSeed(...)
 local seed = settings["seed"]
 for k,v in ipairs(arg) do
  if(type(v)=="number")then
   seed = seed + math.floor((((v*5-42)+settings["subSeed"])*(k*-4*((v%4)+3)))+(v+21)/23)
  end
 end
 return seed
end

-- get random array element
local function getRAE(_table)
 local t = {}
 -- Fix if table does not contain numbers only
 for k,v in ipairs(_table) do table.insert(t,v) end
 return t[math.random(#t)]
end





-- Room:
-- X: xcoord
-- y: ycoord, "roof" of the current pillar
-- z: coors

function spawnRoom(x,y,z)
 local seed = generation.giveSeed(x,y,z)
 
 local conType,bottom,top = generation.getVerticalConnection(x,z)
 math.randomseed(seed)
 
 local difficulty = math.floor(math.sqrt((x^2)+(z^2))+y*10)
 
 local tx = base["x"]+(x*20)-7
 local ty = base["y"]+(y-1)*9
 local tz = base["z"]+(z*20)-7
 

 -- Main Room
 
 local room = {}
 if(conType~=nil and y >= bottom and y <= top)then
  stairs = stairs + 1
  if(y==bottom)then
   -- bottom Stairs
   setCommandBlock("/clone "..getRAE(rooms["fortress"]["stairs"]["bottom"]).." "..tx.." "..ty.." "..tz.."")
  elseif(y==top)then
   -- top Stairs
   setCommandBlock("/clone "..getRAE(rooms["fortress"]["stairs"]["top"]).." "..tx.." "..ty.." "..tz.."")
  else
   -- top+bottom Stairs
   setCommandBlock("/clone "..getRAE(rooms["fortress"]["stairs"]["middle"]).." "..tx.." "..ty.." "..tz.."")
  end
 else
  room = getRAE(rooms["fortress"]["normal"])
  setCommandBlock("/clone "..room["cloneArea"].." "..tx.." "..ty.." "..tz.."")
 end
 
 -- Check for chests
 if(room["chests"] ~= nil)then
  local amount = #room["chests"]["locations"]
  for i=1,amount do
   chests = chests + 1
   -- Should the chest spawn
   if((math.random(amount+(room["chests"]["random_bonus"] or 0)) == 1) or (room["chests"]["locations"][i][6] or false))then
	local chestBlockID = "minecraft:chest"
	-- check for trapped chest
	if(room["chests"]["locations"][i][5] or false)then chestBlockID = "minecraft:trapped_chest" end
    setCommandBlock("/setblock "..(tx+room["chests"]["locations"][i][1]).." "..(ty+room["chests"]["locations"][i][2]).." "..(tz+room["chests"]["locations"][i][3]).." "..chestBlockID.." "..(room["chests"]["locations"][i][5] or 0).." replace "..chest.getChestDataTagByDifficulty(difficulty))
	chests_success = chests_success + 1
   end
  end
 end
 
 -- Connections
 
 -- X+
 if(generation.getEffectiveHeightOfPillar(x+1,z)>=y)then -- Small one
  math.randomseed(seed)
  local con = getRAE(connections["fortress"]["normal"]["X"])
  setCommandBlock("/clone "..con["cloneArea"].." "..(tx+15).." "..(ty+2).." "..(tz+4).."")
 else -- large one
  setCommandBlock("/clone -679 5 -86 -683 14 -72 "..(tx+15).." "..ty.." "..(tz).."")
 end

 -- Z+
 if(generation.getEffectiveHeightOfPillar(x,z+1)>=y)then -- Small one
  math.randomseed(seed)
  local con = getRAE(connections["fortress"]["normal"]["Z"])
  setCommandBlock("/clone "..con["cloneArea"].." "..(tx+4).." "..(ty+2).." "..(tz+15).."")
 else -- large one
  setCommandBlock("/clone -669 5 -90 -683 14 -94 "..tx.." "..ty.." "..(tz+15).."")
 end
 
 -- Z-
 if(generation.getEffectiveHeightOfPillar(x,z-1)<y)then
  setCommandBlock("/clone -669 14 -68 -683 5 -64 "..(tx).." "..ty.." "..(tz-5).."")
 end

 -- X-
 if(generation.getEffectiveHeightOfPillar(x-1,z)<y)then
  setCommandBlock("/clone -669 14 -72 -673 5 -86 "..(tx-5).." "..ty.." "..(tz).."")
 end
 
end

--[[
-- TODO: rework, update to new gendata standarts

-- Biomes: 101: Special Dropluck room ,102: Boss room


-- BIOME GENERATION
-- uses y as z, the minecraft-y-coord is the level
-- like seen from above






-- uses minecraft xyz as inputs











-- remove later:

-- For 3D drawing, to be put into the Dev-Tools
local blocks = {"98 0","87","95 11","12","35 13","1","5 5","159 0","174 0","98 2","4","45"}
function getBlockAtPosition(x,y,z)
 if(y<=3)then
  if(isBossRoom(x,z))then
   return "4"
  elseif(isSpecialRoom(x,y,z))then
   return "41"
  end
 end
 if(blocks[getChunkBiomeAtPostion(x,y,z)]~=nil)then
  return blocks[getChunkBiomeAtPostion(x,y,z)]
 else
  return "89"
 end
 --return rooms[getChunkBiomeAtPostion(x,y,z)]["blockID"]
end
]]