-- Channel for slave -> master CMD communication
dcore.openChannel(23)

-- EVENTS
-- dcore_cmd
-- dcore_newCMDSlave

-- ticks after wich a slave computer gets set to ready
config.softInit("CMD_MAXIMUM_TIMEOUT",20)
-- Commands can be sent to slaves directly without queueing if this is enabled
config.softInit("CMD_ALLOW_COMMAND_QUICK_FLUSHING",true)
-- Waiting time between processing rounds
config.softInit("CMD_MAIN_LOOP_WAITTIME",.05)
-- List of slaves to wake up
config.softInit("CMD_SLAVE_POSITION_LIST",{})


-- List of commands. Older commands first
local commandList = {}
-- Slowly getting worked on, packets getting sent to slaves

local statistics = {}
statistics.commandsRun = 0
statistics.AsyncCommandsRun = 0
statistics.commandsSuccessfull = 0
statistics.asyncCommandsSuccessfull = 0
statistics.commandsLeftAfterSharing = 0
statistics.commandsBeforeSharing = 0
function getCommandStatistics()
	local t = {}
	for k,v in pairs(statistics) do
		t[k] = v
	end
	t.commandListLength = #commandList
	return t
end

local commandSlaves = {}
-- Creates new Slave Computer Objective
-- States: ready|waiting
-- timer: ticks since last state change
-- id: Computer ID of slave
-- workingOn: id of packet it is working on
function newSlaveComputer(id)
	return {
		["state"] = "ready",
		["timer"] = 0,
		["id"] = id,
		["workingOn"] = nil,
	}
end
-- Returns the computer object with the arg id
function getSlaveComputerByID(id)
	for i=1,#commandSlaves do
		if(commandSlaves[i].id == id)then
			return commandSlaves[i]
		end
	end
end
-- Returns the computer object that was requested
-- computer minimum timer
function getFreeSlaveComputer(minimumTimer)
	for i=1,#commandSlaves do
		if(commandSlaves[i].state == "ready")then
			if(minimumTimer)then
				if(commandSlaves[i].timer >= minimumTimer)then
					return commandSlaves[i]
				end
			else
				return commandSlaves[i]
			end
		end
	end
end
-- Returns all Slave objects
function getSlaveComputerData()
	return commandSlaves
end


-- Executing Command Computer Management
function checkForNewSlaves()
	while true do
		local event = {os.pullEvent("dcore_newCMDSlave")}
		local tEvent = textutils.unserialize(event[2])
		local idExisting = false
		-- Check if it is already listed
		for i=1,#commandSlaves do
			if(commandSlaves[i].id == tEvent[4])then
				idExisting = true
			end
		end
		-- If not already listed, add to list
		if(not idExisting)then
			-- Save Positions of Command Computer Slaves
			local list = config.get("CMD_SLAVE_POSITION_LIST")
			local isInList = false
			for i=1,#list do
				if(list[i][1] == tEvent[5][1][1] and list[i][2] == tEvent[5][1][2] and list[i][3] == tEvent[5][1][3])then
					isInList = true
				end
			end
			if(isInList)then
				list[(#list + 1)] = {tEvent[5][1][1],tEvent[5][1][2],tEvent[5][1][3]}
				config.set("CMD_SLAVE_POSITION_LIST",list)
				print("Registered Computer at {"..tEvent[5][1][1]..","..tEvent[5][1][2]..","..tEvent[5][1][3].."}")
			end
			
			commandSlaves[(#commandSlaves + 1)] = newSlaveComputer(tEvent[4])
			-- Tell to get it going!
			dcore.send(22,commandSlaves[(#commandSlaves)].id,"DoWork")
			-- Add new slaves to list in config to save thier position! config.set("CommandComputerList") = commandSlaves
		end
	end
end
-- //// --



-- Creates a command object [,func]
function newCommandObject(command,requireResponse,id,func)
	local commandObject = {}
	commandObject.command = command
	commandObject.isAsync = requireResponse
	commandObject.id = id
	if(func)then
		commandObject.func = func
	end
	return commandObject
end
-- Adds a command to the list of waiting commands
function addCommandOnList(commandObject)
	table.insert(commandList,commandObject)
end
-- Returns one command object, or nil if it could not find one
function getCommandFromList(requireResponse,timeout)
	local pointer = 1
	while pointer <= commandList and pointer < timeout do
		if(commandList[pointer] == nil)then 
			return
		elseif(commandList[pointer].requireResponse == requireResponse)then
			return commandList[pointer]
		end
		pointer = pointer + 1
	end
end
-- Command Packet contains one or multiple commands

-- ID is sent to slave
function newCommandPacket()
	local commandPacket = {}
	commandPacket.content = {}
	commandPacket.id = tostring({})
	-- Adds a command to packet
	commandPacket.add = function(self,commandObject)
		table.insert(self.content,commandObject)
		return self
	end
	return commandPacket
end

-- Collecting the signals of Slaves when they are done
function recieveSlaveSignals()
	while true do
		local event = {os.pullEvent("dcore_cmd")}
		local tEvent = textutils.unserialize(event[2])
		if(tEvent)then
			local slaveComputer = getSlaveComputerByID(tEvent[4])
			local message = tEvent[5]
			if(slaveComputer)then
				-- Check if computer is still listed as working on that project, or if it has timed out
				if(slaveComputer.workingOn)then
					if(slaveComputer.workingOn.id == message[1][1])then
						-- Check if event is Async
						if(slaveComputer.workingOn.content[1].isAsync)then
							-- For each command in the package do
							for i=1,#slaveComputer.workingOn.content do
								statistics.asyncCommandsSuccessfull = statistics.asyncCommandsSuccessfull + 1
								-- Run functions or so that are requested to trigger
								if(slaveComputer.workingOn.content[i].func)then
									slaveComputer.workingOn.content[i].func()
								end
							end
							-- Free the slave to work on other things
							slaveComputer.workingOn = nil
							slaveComputer.state = "ready"
							slaveComputer.timer = 0
						else
							statistics.commandsSuccessfull = statistics.commandsSuccessfull + 1
							-- Queue Event to return
							os.queueEvent("cmd_eventDone_"..slaveComputer.workingOn.content[1].id,message[1][2])
							--print("Queue: "..slaveComputer.workingOn.content[1].id)
							-- Free the slave to work on other things
							slaveComputer.workingOn = nil
							slaveComputer.state = "ready"
							slaveComputer.timer = 0
						end
					end
				end
			end
		end
	end
end

-- Send the current packet of a slave to that slave to have something to work on
-- Returns if it was successful
function sendPacketToSlave(slave)
	-- 
	if(slave["state"] == "waiting")then return false end
	slave["state"] = "waiting"
	slave["timer"] = 0
	-- Sending the data to the slave
	-- Found out if its async, then collect all the commands in a table
	--print("Send Packet to slave #"..slave.id)
	if(slave.workingOn.content[1].isAsync)then
		local t = {}
		for i=1,#slave.workingOn.content do
			t[i] = slave.workingOn.content[i].command
		end
		dcore.send(22,slave.id,{t,slave.workingOn.id})
	else
		dcore.send(22,slave.id,{slave.workingOn.content[1].command,slave.workingOn.id})
	end
end

-- Work Loop Making stuff
function workLoop()
	while true do
		-- Increase Timer Tick
		for i=1,#commandSlaves do
			commandSlaves[i].timer = commandSlaves[i].timer + 1
			if(commandSlaves[i].state == "waiting")then
				-- Check if we have a timeout, slave is not responding
				if(commandSlaves[i].timer >= config.CMD_MAXIMUM_TIMEOUT)then
					commandSlaves[i].state = "ready"
					commandSlaves[i].timer = 0
					if(commandSlaves[i].workingOn.content[1].isAsync)then
						-- Not sure what to do, doing nothing is okay i guess
					else
						os.queueEvent("cmd_eventDone_"..tostring(commandSlaves[i].workingOn.content[1].id))
					end
					commandSlaves[i].workingOn = nil
					-- TODO: list how much we lost with this timeout
					
				end
			end
		end
		statistics.commandsBeforeSharing = #commandList
		-- As long as there are no working slave computers and he actually have something for them to work on
		while (getFreeSlaveComputer() and #commandList > 0) do
			local packet = newCommandPacket()
			-- Put things to do into a packet
			if(commandList[1].isAsync)then -- Async
				local goal = math.floor(((#commandList + 5)/(#commandSlaves + 1) + 2))
				local pointer = 1
				while goal > 0 and pointer <= #commandList do
					if(commandList[pointer].isAsync)then
						goal = goal - 1						
						-- Create new element so we do not create the object that the pointer points to next
						packet:add(newCommandObject(commandList[pointer].command,commandList[pointer].isAsync,commandList[pointer].id))
						table.remove(commandList,pointer)
					end
					pointer = pointer + 1
				end
			else -- NonAsync
				-- Create new element so we do not create the object that the pointer points to next
				packet:add(newCommandObject(commandList[1].command,commandList[1].isAsync,commandList[1].id))
				table.remove(commandList,1)
			end
			-- Send the packet
			local slave = getFreeSlaveComputer()
			slave["workingOn"] = packet
			sendPacketToSlave(slave)
		end
		statistics.commandsLeftAfterSharing = #commandList
		sleep(config.CMD_MAIN_LOOP_WAITTIME)
	end
end



-- Just runs a command
-- Second argument can be a funcitn, that function will be run after the commands have been executed 
function run(command,func)
	--print("run:"..tostring(command))
	statistics.AsyncCommandsRun = statistics.AsyncCommandsRun + 1
	-- Find free slave with more than 5 idle
	-- If not, put into list
	local eventId = math.random(10000000)
	table.insert(commandList,newCommandObject(command,true,eventId,func))
end
--

-- Runs a command, returns value
function get(command)
	statistics.commandsRun = statistics.commandsRun + 1
	--print("get:"..tostring(command))
	-- Find free slave
	local didFlush = false
	-- Save Event ID for later event
	local eventId = math.random(10000000)
	if(config.CMD_ALLOW_COMMAND_QUICK_FLUSHING)then
		local slave = getFreeSlaveComputer(5)
		if(slave)then
			slave["workingOn"] = newCommandPacket():add(newCommandObject(command,false,eventId))
			sendPacketToSlave(slave)
			didFlush = true
		end
	end
	-- If not, put into list
	if(not didFlush)then
		table.insert(commandList,newCommandObject(command,false,eventId))
	end
	local _,t = os.pullEvent("cmd_eventDone_"..eventId)
	return unpack(t)
end



