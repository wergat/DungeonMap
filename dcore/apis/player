os.loadAPI(":dungeon/dcore/apis/dcore")
dcore.requireAPI("entity")

-- Possible addition from MagicAndMages: player:castSpell(spell) ???
function getPlayerByName(_playerName)
	local playerObject = {}
	playerObject.name = _playerName
	playerObject.hasArmorStand = false
	playerObject.position = {}
	playerObject.rotation = {}
	
	-- Returns the player name
	playerObject.getName = function(self)
		return self.name
	end
	
	playerObject.isOnline = function(self)
		local r,_ = commands.testfor(entity.newSel("a"):add("name",self.name):toString())
		return r
	end
	
	-- You can now add xp to the player
	playerObject.addExp = function(self,v)
		commands.xp(v,self.name)
	end
	
	-- Test if the player is on any scoreboaqrd
	playerObject.hasScoreboard = function(self)
		local a,_ = commands.exec("/scoreboard players list "..self.name)
		return a
	end
	
	-- Get a specific value of a scoreboard of a player
	playerObject.getScoreboardValue = function(self,scoreBoardName)
		local s,t = commands.exec("/scoreboard players list "..self.name)
		if(s)then
			for i=2,#t do
				if(string.sub(string.match(string.match(t[i],"([^,]+):([^,]+)")," .*"),2,-1) == scoreBoardName)then
					return tonumber(string.sub(string.match(string.match(t[i],":([^,]+)")," .* "),2,-2))
				end
			end
		else
			return nil
		end
	end
	
	playerObject.setScoreboardValue = function(self,scoreBoardName,scoreBoardValue)
		local s,t = commands.exec("/scoreboard players set "..self.name.." "..scoreBoardName.." "..scoreBoardValue.."")
	end
	
	
	-- Get all values of all scoreboard of a player	
	playerObject.getScoreboardData = function(self)
		local s,t = commands.exec("/scoreboard players list "..self.name)
		local data = {}
		if(s)then
			for i=2,#t do
				data[string.sub(string.match(string.match(t[i],"([^,]+):([^,]+)")," .*"),2,-1)] = tonumber(string.sub(string.match(string.match(t[i],":([^,]+)")," .* "),2,-2))
			end
		end
		return data
	end
	
	-- Teleports a player to a location or other player
	playerObject.teleportTo = function(self,...)
		if(#arg==1)then -- Teleport to a player/entity
			local s,e = commands.exec("/tp "..self.name.." "..arg[1])
			if(not s) then print(e[1]) end
		elseif(#arg==3)then -- Teleport to a location
			local s,e = commands.exec("/tp "..self.name.." "..arg[1].." "..arg[2].." "..arg[3])
			if(not s) then print(e[1]) end
		end
	end
	
	-- REturns the players current position
	playerObject.getPosition = function(self)
		return self.position["x"],self.position["y"],self.position["z"]
	end
	
	playerObject.getRotation = function(self)
		return self.rotation["rX"],self.rotation["rY"]
	end
	
	playerObject.updateLocation = function(self)
		local entitySelector = entity.newSel():add("name",self.name):add("type","ArmorStand"):toString()
		local s,d = commands.tp(entitySelector,self.name)
		local s,e = commands.entitydata(entitySelector,"{}")
		local data = dcore.convertNBTtoTable(string.sub(e[1],30,-1))
		self.position = {["x"] = data["Pos"]["0"] or 0,["y"] = data["Pos"]["1"] or 0,["z"] = data["Pos"]["2"] or 0}
		self.rotation = {["rX"] = data["Rotation"]["0"] or 0,["rY"] = data["Rotation"]["1"] or 0}
		local s,d = commands.tp(entitySelector,0,10,0)
	end
	
	-- Checking for player's armorStand
	local armorStandExists,_ = commands.testfor(entity.newSel():add("name",_playerName):add("type","ArmorStand"):toString())
	if(not armorStandExists)then 
		commands.exec("/summon ArmorStand ~ ~1 ~ {CustomName:".._playerName..",ShowArms:1,Invisible:1,NoGravity:1,DisabledSlots:1973790}")
		print("Summoned new ArmorStand!")
	end
	
	-- Set semi-important Metadata for player object
	local metaTable = {}
	-- Set type of this object
	metaTable["type"] = "PlayerObject" 
	
	
	playerObject = setmetatable(playerObject,metaTable)
	return playerObject
end

function getPlayersBySelector(_selector)
	local _,l = commands.testfor(tostring(_selector))
	local playerNames = {}
	local playerObjects = {}
	for i=1,#l do
		playerObjects[i] = getPlayerByName(string.sub(l[i],7,-1))
	end	
	return setmetatable({},{
		__index = function(t,key)
			return function(t,...) 
				local r={} 
				for i=1,#playerObjects do 
					r[playerObjects[i]:getName()] = playerObjects[i][key](playerObjects[i],unpack(arg)) 
	end return r end end })
end

-- Register the type "PlayerObject" we just used
-- TODO: maybe improve the testing for this?
if(dcore.registerCustomType)then
	dcore.registerCustomType("PlayerObject",function(t) if((getmetatable(t)["type"] or "") == "PlayerObject")then return true end end)
end