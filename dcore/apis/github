-- Loads a keylist from the internet
local keylist = textutils.unserialize(http.get("http://pastebin.com/raw/v6PvjTAz").readAll())
-- JSON thing to parse data from github
local JSON = assert(loadfile ":dungeon/dcore/apis/JSON.lua")()

local defaultKey = nil

-- Tests a key
function testKey(key)
	local x = http.get("https://api.github.com/rate_limit",{["Authorization"] = "token " .. key,}).readAll()
	return JSON:decode(x)["resources"]["core"]["remaining"]
end

-- Tests a array of Lists
-- Input: Key List
-- Output: Input list with rate limits
function testkeylist(t)
	local res = {}
	for i=1,#t do
		res[key] = testKey(t[i])
	end
	return res
end

-- Picks a working key
function pickWorkingKey(t)
	local list = t
	if(not list)then list = keylist end
	local pointer = 1
	-- Pick the first working key
	while pointer <= #list do
		local key = list[pointer]
		-- Key must be above threshold
		if(testKey(key) > 60)then
			return key
		end
		pointer = pointer + 1
	end
	-- At this point all keys are invalid
end

function setDefaultKey(key)
	defaultKey = key
end
function get(url,header,key)
	if not key then
		if(defaultKey)then
			return get(url, header,defaultKey)
		else
			return http.get(url, header)
		end
	end
	header = header or {}
	header["Authorization"] = "token " .. key
	return http.get(url, header)
end

-- Returns the requested URL as a parsed Table, instead of JSON
function getRequestAsTable(url,header,key)
	if get(url,header,key) then
		return JSON:decode(x.readAll())
	else
		return false, "GITHUB_NO_RESPONSE"
	end
	
end

-- Simple request for a simple URL request
function request(url,header)
	local header = header or {}
	return getRequestAsTable(url,header,pickWorkingKey(keylist))
end
