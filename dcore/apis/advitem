dcore.requireAPI("items")
dcore.requireAPI("farben")
dcore.requireAPI("ench")


-- //////////////////
--  Data calculation and initialization
-- //////////////////

-- ///// Rarity data/calculations
local rarityLevels = {"usual","unusual","rare","extraordinary","epic","mythical","legendary","forgotten"}
-- Gets rarity name from rarity level
function getRarity(_v)
	return rarityLevels[_v] or nil
end
local rarityColors = {"f","b","3","1","5","d","6","4"}
-- Gets rarity color from rarity level
function getRarityColor(_v)
	if(not _v or _v>#rarityColors)then error("Please give a number! ".._v.." does not seem to be a good one!") end
	return SS(rarityColors[_v]) or nil
end
-- Calculates rarity level, optional input is minimum rarity level
function getRarityLevelOfItem(_forceRarity)
	local r = _forceRarity or 1
	local chance = {0.25,0.3,0.35,0.4,0.4,0.4,0.4,0.4} -- {1,1,1,1,1,0.75,0.1,0.1}
	while((math.random(20)/20)<=chance[r] and r<#chance)do r = r + 1 end
	return r
end
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --






--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
-- ///// Enchantment Caching
-- Gathers valid enchantments for an item
local cachedEFI = {} -- Cached Enchantment for item
function getEnchantmentForItem(item)
	return cachedEFI[item]
end
local function initcEFI()
	local eD = ench.getEnchData()
	for enchId,enchT in pairs(eD) do
		-- Primary items
		for _,v in pairs(enchT["primary"])do
			for _,w in pairs(items.getAllChildren(v))do
				if(not cachedEFI[w])then cachedEFI[w] = {["primary"] = {},["secondary"] = {}} end
				table.insert(cachedEFI[w]["primary"],enchId-1)
			end
		end
		-- Secondary items
		for _,v in pairs(enchT["secondary"])do
			for _,w in pairs(items.getAllChildren(v))do
				if(not cachedEFI[w])then cachedEFI[w] = {["primary"] = {},["secondary"] = {}} end
				table.insert(cachedEFI[w]["secondary"],enchId-1)
			end
		end
	end
end
-- Initialize caching enchantment for items
initcEFI()
-- ///// 
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --


--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
-- ///// Used functions, maybe`?
-- Counts how many elements a table really has
local function count(input) --Counts, I guess?
	local int = 0           --Yes it does!
	for k,v in pairs(input) do
		int = int+1
	end
	return int
end
-- Overrides one table by another... might not work that well...
local function overrideTable(_a,_b)
	local c = _a
	for k,v in pairs(_b) do
		if(type(v)=="table")then
			c[k] = overrideTable(_a[k],v)
		else
			c[k] = v
		end
	end
	return c
end
-- ///// 
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --



--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
-- ///// Default weapon and armor registration
-- // Weapon
local weapons = {}
-- Registers weapon.
function registerWeapon(weaponObject)
	local newWeaponObject = {}
	newWeaponObject.typ = weaponObject.weaponType
	newWeaponObject.itemID = weaponObject.itemID
	table.insert(weapons,newWeaponObject)
end
-- Register all in items listed pieces of swords
for _,t in pairs(items.getItemTypesOfParent("weapon")) do
	for k,v in pairs(items.getAllItemsOfType(t))do
		local item = items.getItem(v)
		registerWeapon{weaponType = t,itemID = item["id"]}
	end
end

-- // Armor
local armor = {}
-- Registers armor.
function registerArmor(armorObject)
	local newArmorObject = {}
	newArmorObject.typ = armorObject.armorType
	newArmorObject.itemID = armorObject.itemID
	table.insert(armor,newArmorObject)
end
-- Register all in items listed pieces of armor (At least (Helmet|Chestplate|Leggings|Shoes))
for _,t in pairs(items.getItemTypesOfParent("armor")) do
	for k,v in pairs(items.getAllItemsOfType(t))do
		local item = items.getItem(v)
		registerArmor{armorType = t,itemID = item["id"]}
	end
end
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --



--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
-- ///// Attributes calculations, registration and attribute data
local attributes = {}
local attributeTypes = {}
-- TODO: check for unregistered, yet active attribute types
function registerAttribute(attribute,equipmentType)
	for _,v in pairs(items.getAllChildren(equipmentType))do
		if(not attributes[v])then attributes[v] = {} end
		table.insert(attributes[v],attribute)
	end
	if(not attributeTypes[attribute.type])then attributeTypes[attribute.type] = {["registered"] = false} end
	attributeTypes[attribute.type]["active"] = true
end
function getAttributeTypes()
	local t = {}
	for k,_ in pairs(attributeTypes)do table.insert(t,k) end
	return t
end
function getAttributesForItem(item)
	return attributes[item]
end
function getRandomAttributeType()
	return getRAE(getAttributeTypes())
end
function getRandomAttributeForItem(item)
	local attType = getRandomAttributeType()
	if(not attributes[item])then error("Item not found!"..tostring(item),2) end
	local attributeFound = getRAE(attributes[item])
	while attributeFound.type ~= attType and math.random(10)>1 do
		attributeFound = getRAE(attributes[item])
	end
	return attributeFound
end
function registerAttributeType(attType,data)
	if(not attributeTypes[attType])then attributeTypes[attType] = {} end
	attributeTypes[attType]["registered"] = true
	attributeTypes[attType]["trigger"] = data.trigger
end

-- Register most stuff in our current database, like enchantments
-- Enchantments
for _,itemType in pairs(items.getAllChildren("equipment"))do
	local attribute = {}
	attribute.init = function(self)
		local enchs = getEnchantmentForItem(itemType)
		local choosenEnch = nil
		if(#enchs.secondary > 0)then
			choosenEnch = getRAE(enchs.secondary)
		end
		if(#enchs.primary > 0 and (math.random(3) > 1 or not choosenEnch))then
			choosenEnch = getRAE(enchs.primary)
		end
		local level = math.random(ench.getMaxLvWithID(choosenEnch))
		return {ench = choosenEnch,lv = level,["type"] = "enchantment"}
	end
	attribute.type = "enchantment"
	registerAttribute(attribute,itemType)
end
registerAttributeType("enchantment",{trigger = function(self)
	local allEnchData = {}
	for k,v in pairs(self.attributes) do
		if(v.type == "enchantment")then
			allEnchData[v["ench"]] = math.min(((allEnchData[v["ench"]] or 0) + v["lv"]),ench.getMaxLvWithID(v["ench"]))
		end
	end
	local enchAmount = 1
	for k,v in pairs(allEnchData)do
		if(not self.tag.ench)then self.tag.ench = {} end
		table.insert(self.tag.ench,{id = k,lvl = v})
		self.price = math.floor(self.price + 20 + (v*40+((v^3-1)*60))*enchAmount^2)
		self.value = math.floor(self.value + 80 + (v*10+((v-1)*3))) + enchAmount * 25
		enchAmount = enchAmount + 1
		--table.insert(self.tag.display.Lore,"\""..ench.getEnchByID(k).name.." lv "..v.."\"")
	end
	return self
end})

-- Attribute Modifiers
local attributeData = {}
attributeData["generic.movementSpeed"] = {["applies"] = {"equipment"},["factor"] = .005,["operation"] = 1}
attributeData["generic.maxHealth"] = {["applies"] = {"armor"},["factor"] = 1,["operation"] = 0}
attributeData["generic.attackDamage"] = {["applies"] = {"melee","armor"},["factor"] = 1,["operation"] = 0}

for attributeModType,data in pairs(attributeData)do
	local attribute = {}
	attribute.init = function(self) return {attModType = attributeModType,oprt = math.random(10),amount = (math.random(3)+2),["type"] = "attributeModifier"} end
	attribute.type = "attributeModifier"
	for _,appliesTo in pairs(data.applies)do
		registerAttribute(attribute,appliesTo)
	end
end
registerAttributeType("attributeModifier",{trigger = function(self)
	local allAttributeData = {}
	for k,v in pairs(self.attributes) do
		if(v.type == "attributeModifier")then
			allAttributeData[v["attModType"]] = (allAttributeData[v["attModType"]] or 0) + v["amount"]
		end
	end
	local attributeAmount = 1
	for k,v in pairs(allAttributeData)do
		local value = v * attributeData[k]["factor"]
		if(not self.tag.AttributeModifiers)then self.tag.AttributeModifiers = {} end
		local t = {["AttributeName"] = k}
		t["Operation"] = attributeData[k].operation
		t["UUIDLeast"] = math.random(1000000000)
		t["UUIDMost"] = math.random(1000000000)
		t["Name"] = "kitten"
		if(self.itemID and k == "generic.attackDamage")then
			local item = items.getItemWithStringID(self.itemID)
			if(item.types["weapon"] and item.damage)then
				table.insert(self.tag.display.Lore,"\"gets +"..value.." from AttributeModifiers\"")
				value = value + item.damage
			end
		end
		t["Amount"] = value
		table.insert(self.tag.AttributeModifiers,t)
		self.price = math.floor(self.price + 53 + (v*40+((v^2-1)*120)) * attributeAmount^2)
		self.value = math.floor(self.value + 10 + (v*10+((v-1)*6)) + attributeAmount * 20)
		attributeAmount = attributeAmount + 1
	end
	if(self.itemID)then
		local item = items.getItemWithStringID(self.itemID)
		if(item.types["weapon"] and item.damage)then
			if(not allAttributeData["generic.attackDamage"])then
				if(not self.tag.AttributeModifiers)then self.tag.AttributeModifiers = {} end
				local t = {["AttributeName"] = "generic.attackDamage"}
				t["Operation"] = 0
				t["UUIDLeast"] = math.random(1000000000)
				t["UUIDMost"] = math.random(1000000000)
				t["Name"] = "defaultATKDMG"
				t["Amount"] = item.damage
				table.insert(self.tag.AttributeModifiers,t)
			end
		end
	end
	return self
end})

--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --





-- //////////////////
--   Data processing and item creation
-- //////////////////

function newItem(args)
	local args = args or {}
	local itemObject = {}
	itemObject.itemType = args.itemType -- (Armor|Weapon|...)
	if(not itemObject.itemType)then itemObject.itemType = "equipment" end
	
	itemObject.rarity = args.rarity or getRarityLevelOfItem(args.rarityMinLevel)
	itemObject.attributes = args.attributes or {}
	itemObject.itemLevel = args.itemLevel or 5
	itemObject.itemTier = args.itemTier or nil
	
	itemObject.baseType = itemObject.itemType
	itemObject.itemType = items.getRandomChild(itemObject.itemType)
	
	itemObject.tag = {["display"] = {["Lore"] = {}},["cc"] = {}}
	itemObject.price = 20
	itemObject.value = 10
	itemObject.itemID = nil
	
		
	-- Returns the color and color rarity for leather armor
	itemObject.setColorOfArmor = function(self)
		if(self.itemID)then
			if(items.getItemWithStringID(self.itemID).types.dyeable)then
				local r,g,b
				for i=1,4 do
					r = (r or 0)+((math.random(2)-1))
					g = (g or 0)+((math.random(2)-1))
					b = (b or 0)+((math.random(2)-1))
				end
				-- Something in-between 0 and 12, 0 = common, 12 = really rare
				local rarity_level = math.pow((2-r),2)+math.pow((2-g),2)+math.pow((2-b),2)
				-- Color code number
				local colorOfArmor = (math.floor(b*63.75)+256*math.floor(g*63.75)+65536*math.floor(r*63.75))
				self.tag.color = colorOfArmor
				table.insert(self.tag.display.Lore,"Color is "..farben.inspectColor(colorOfArmor))
				self.tag.display.color = colorOfArmor
				return rarity_level
			end
		end
		return 0
	end
	
	itemObject.autoLore = function(self)
		 table.insert(self.tag.display.Lore,"\"Rarity is "..getRarityColor(self.rarity)..SS("o")..getRarity(self.rarity)..SS(5)..SS("o").."\"")
		 table.insert(self.tag.display.Lore,"\"Price is about "..self.price.." quaz\"")
	end
	
	itemObject.autoItemID = function(self)
		local item = items.getItem(items.getOneItemWithTag(self.itemType))
		self.itemID = item["id"]
	end
	
	itemObject.autoTier = function(self)
		if(not self.itemID)then self:autoItemID() end
		local item = items.getItemWithStringID(self.itemID)

		-- Check if item has a tier
		if(not item.types["no_tier"])then
			-- Then set an tier for that item!
			for k,v in pairs(items.getSortedTiers())do
				-- Go though all the item tiers and check for the chances
				local chance = items.getChanceOfTier(self.itemLevel,v["name"])
				if(chance > 0 and not self.itemTier)then
					if(chance < 100)then
						if(math.random(10000) <= chance*100)then
							self.itemTier = v["name"]
						end
					else
						self.itemTier = v["name"]
					end
				end
				if(self.itemTier)then
					self.value = self.value + k * 50 * k
				end
			end
			local newItem = items.getItem(items.getOneItemWithTag{self.itemType,self.itemTier})
			self.itemID = newItem["id"]
			if(not self.itemTier)then self.itemID = nil end
		end
	end
	
	itemObject.getNewAttribute = function(self)
		local newAttribute = getRandomAttributeForItem(self.itemType)
		return newAttribute.init()
	end
	
	itemObject.autoPrice = function(self)
		self.price = math.floor(self.price * (1+self.rarity/10) * (1+math.sqrt(items.getDurability(self.itemID))/100))
		self.value = math.floor(self.value * (1+math.sqrt(items.getDurability(self.itemID))/20))
		if(items.getItemWithStringID(self.itemID)["types"]["no_tier"])then
			self.value = self.value*2+1300
		end
		self.value = self.value - 800
	end
	
	itemObject.auto = function(self)
		self:autoItemID()
		self:autoTier()
		if(self.itemID)then
			if(not self.tag.cc.rolls)then self.tag.cc.rolls = {} end
			local c = (self.rarity*2)
			while #self.attributes <= c do
				if((self.itemLevel >= 25) or math.random(25) < self.itemLevel)then
					local seed = math.random(10000000)
					math.randomseed(seed)
					table.insert(self.attributes,self:getNewAttribute())
					--table.insert(self.tag.display.Lore,"\""..tostring(#self.attributes).." is a "..tostring(self.attributes[#self.attributes]["type"]).."\"")
					table.insert(self.tag.cc.rolls,seed)
				else c = c - 1 end
			end
			for k,v in pairs(getAttributeTypes()) do
				if(attributeTypes[v]["registered"])then
					self = attributeTypes[v].trigger(self)
				end
			end
			self:setColorOfArmor()
			self.tag.display.Name = getRarityColor(self.rarity)..items.getName(self.itemID)
			self:autoPrice()
			self:autoLore()
		end
		return self
	end
	
	itemObject.getNBT = function(self)
		return {["tag"] = self.tag,["id"] = self.itemID}
	end
	
	itemObject.autoNBT = function(self)
		self:auto()
		return self:getNBT()
	end
	itemObject.isValid = function(self)
		return (self.itemID ~= nil)
	end
	
	return itemObject
end


--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
--  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --


function getEquipmentForChest(powerInput)
	local power = math.floor(powerInput/math.random(math.floor(powerInput/10)+1))
	print(power)
	local item = advitem.newItem{["itemType"] = "equipment",["itemLevel"] = power}
	item:auto()
	if(item:isValid())then
		local returnData = {}
		returnData["powerCost"] = math.floor(item.value/100)
		returnData["setItemCount"] = 1
		local nbt = item:getNBT()
		returnData["item"] = nbt
		returnData["item"]["Damage"] = math.floor(((math.random(5)-1)/5)*items.getDurability(item.itemID))
		--print(dcore.getNBTStringFromTable(returnData["item"]))
		return returnData
	else
		return false
	end
end