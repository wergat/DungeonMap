JSON = assert(loadfile ":dungeon/dcore/apis/JSON.lua")()
print("Welcome to the Dungeon Map updater!")

-- /// Engine Check
-- Check if HTTP API is enabled
if not http then
	printError("No HTTP! The updater requires connection to the internet to update the files! Please provide an internet connection or enable the HTTP API for ComputerCraft in the mod config!")
	error()
end
-- Check if there is an internet connection and if github is whitlisted
if not http.get("https://api.github.com/") then
	if not http.get("http://pastebin.com/") then
		printError("We need an internet connection to update our files!")
	else
		printError("If you have internet, please check your Computercraft mod config and allow api.github.com to be used, so we are allowed to download out files!")
	end
	error()
end

local SHACodes = {}
if fs.exists(":dungeon/hashes") then
	local open = fs.open(":dungeon/hashes", "r")
	SHACodes = open.readAll()
	open.close()
	SHACodes = textutils.unserialize(SHACodes)
end

print("It looks like your system is good to go!")
print("What would you like to update?")
print("[1] System Files")
print("[2] The Updater")
print("[3] Dev Tools")
print("[4] Everything")

local a
repeat
	a = read()
until type(tonumber(a)) == "number"

if(a==1)then
	downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/dcore")
elseif(a==2)then
	downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/dcore")
elseif(a==3)
	downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/dev")
	downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/indev")
	downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/old")
elseif(a==4)
	downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/")
end













local logfile = fs.open(":dungeon/logs/updater","w")
local githubRateTable = JSON:decode(http.get("https://api.github.com/rate_limit").readAll())
logfile.writeLine("Log file for the updater!")
logfile.writeLine("API Calls remaining: "..githubRateTable["resources"]["core"]["remaining"])



local files_updated = 0
local files_not_updated = 0

local function getCurrentTimeAsUNIXTimespamp()
	return http.get("http://currentmillis.com/api/v2/seconds-since-unix-epoch.php").readAll()
end

local cancle

local function downloadFromDir(url)
	if(cancle)then return end
	local x = http.get(url)
	if x then
		x = x.readAll()
	else
		local currentTime = getCurrentTimeAsUNIXTimespamp()
		local githubRateTable = JSON:decode(http.get("https://api.github.com/rate_limit").readAll())
		local githubRateLimit = githubRateTable["resources"]["core"]["reset"]
		local waitTime = githubRateLimit - currentTime
		local mins = math.floor(waitTime/60)
		local secs = waitTime%60
		printError(" > Oops! It looks like you've installed the DungeonMap files too much recently. Try again in about " .. mins .. "m:" .. secs .. "s!")
		print("")
		logfile.writeLine("Oops! It looks like you've installed the DungeonMap files too much recently. Try again in about " .. mins .. "m:" .. secs .. "s!")
		cancle = true
		return
	end
	x = JSON:decode(x)
	for i = 1, #x do
		local f = x[i]
		local path = f["path"]
		if (f["sha"] == SHACodes[path] and f["type"] ~= "dir") then
			files_not_updated = files_not_updated + 1
			logfile.writeLine("Not updated: "..path)
		elseif f["type"] == "dir" then
			print("Scanning directory: " .. path)
			logfile.writeLine("Downloading directory: " .. path)
			SHACodes[path] = f["sha"]
			downloadFromDir(f["url"])
		else
			for k,v in pairs(BLACKLIST) do if(v==path)then return end end
			print(" Downloading file: " .. path)
			logfile.writeLine("Downloading file: " .. path)
			local xt = http.get(f["download_url"]).readAll()
			local open = fs.open("dungeon/" .. path, "w")
			open.write(xt)
			open.close()
			SHACodes[path] = f["sha"]
			files_updated = files_updated + 1
		end
	end
end

--downloadFromDir("https://api.github.com/repos/wergat/DungeonMap/contents/")

if(not cancle)then
	print("Finished updating!")
	print("" .. files_updated .. " files have been updated.")
	print("Found "..files_not_updated.." file(s) not to be worthy for updating!")
else
	print("Updating cancelled due to API limitations!")
end
print("")
local open = fs.open(":dungeon/hashes", "w")
open.write(textutils.serialize(SHACodes))
open.close()

local githubRateTable = JSON:decode(http.get("https://api.github.com/rate_limit").readAll())
logfile.writeLine("API Calls remaining: "..githubRateTable["resources"]["core"]["remaining"])
logfile.close()