-- inset rpg elememts here
-- Wenn jemand in nÃ¤he ist
-- Dialog an diese Person
term.clear()
term.setCursorPos(1,1)

print("Starting Dialog")



--chat_colors = {"black","dark_blue","dark_green","dark_aqua","dark_red","dark_purple","gold","gray","dark_gray","blue","green","aqua","red","light_purple","yellow","white"}
chat_colors = {"dark_aqua","gold","gray","blue","green","aqua","red","light_purple","yellow"}

npcs = {}
dialogdata = {}
open_dialog_id = {}

local file_used = {}
function print_log(file,...)
 --local logfile = fs.open("logs/"..file, file_used[file] and "a" or "w")
 --if(not file_used[file])then file_used[file] = true end
 --logfile.writeLine(...)
 --logfile.close()
end

function dialogTriggerInit()

end

function scoreboard_GetObjective(data)
 return string.sub(string.match(string.match(data,"([^,]+):([^,]+)")," .*"),2,-1)
end

function scoreboard_GetValue(data)
 return tonumber(string.sub(string.match(string.match(data,":([^,]+)")," .* "),2,-2))
end

function dialogCheckForDialogAnswers()
 for j=1,#open_dialog_id do
  local a = ezCmd("/scoreboard players list "..j,2)
  for i=2,#a do
   if(scoreboard_GetObjective(a[i])=="dc_dialog")then
    local v = scoreboard_GetValue(a[i]) or 0
    if(v>0)then
	 -- open_dialog_id[j] == UUID
	 local npc = dialogdata[open_dialog_id[j]]["npc"]
	 local dialogID = dialogdata[open_dialog_id[j]]["dialog"]
 
	 if(not npcs[npc]["dialogs"][dialogID]["answered"])then
	  if(npcs[npc]["dialogs"][dialogID]["showed"])then
	   print_log("dialog","- [ODID:"..j.."][UUID:"..open_dialog_id[j].."] found answer to dialog "..dialogID.." with \""..npcs[npc]["name"].."\" ("..npc.."); Answer is \""..npcs[npc]["dialogs"][dialogID]["answers"][v].."\" ("..v..") and valid")
	   npcs[npc]["dialogs"][dialogID]["answered"] = true
	   npcs[npc]["dialogs"][dialogID]["showed"] = false
	   TriggerFunction(npc,dialogID,v)
	  else
	   print_log("dialog","- [ODID"..j.."][UUID:"..open_dialog_id[j].."] found answer to dialog "..dialogID.." with \""..npcs[npc]["name"].."\" ("..npc.."); Answer is "..v.." but invalid, because dialog itself has not been displayed yet!")
	  end
	 else
	  print_log("dialog","- [ODID"..j.."][UUID:"..open_dialog_id[j].."] found answer to dialog "..dialogID.." with \""..npcs[npc]["name"].."\" ("..npc.."); Answer is "..v.." but invalid")
	 end
	 ezCmd("/scoreboard players set "..j.." dc_dialog 0")
	end
   end
  end
 end
end

function ezCmd(command,_r,_errorOutput)
 local a,b = commands.exec(command)
 local errorOutput = _errorOutput or false
 if(not a and errorOutput)then
  local errorText = "Error while executing command:"..command
  for i=1,#b do
   errorText = errorText..(b[i] or "?")
  end
  print_log("cmd",errorText)
 end
 local r = _r or 0
 if(r==1)then
  return a
 elseif(r==2)then
  return b
 elseif(r==3)then
  return a,b
 end 
end

function dialogCheckForStart()
 for npcID=1,#npcs do
  local dialog_open = false
  local dialogID = 1
  if(npcs[npcID]["trigger"]["t"] == "range")then
   local isInside = ezCmd("/testfor @p[r="..npcs[npcID]["trigger"]["range"]..",x="..npcs[npcID]["x"]..",y="..npcs[npcID]["y"]..",z="..npcs[npcID]["z"].."]",1,false)
   --write(npcs[npcID]["trigger"]["o"])
   if(npcs[npcID]["trigger"]["o"]=="gotIn")then -- Fixxen
    dialog_open = (not npcs[npcID]["trigger"]["wasIn"] and isInside)
	npcs[npcID]["trigger"]["wasIn"] = isInside
   end
   if(npcs[npcID]["trigger"]["o"]=="isIn")then
    dialog_open = isInside
   end
   if(npcs[npcID]["trigger"]["o"]=="gotOut")then
    dialog_open = (npcs[npcID]["trigger"]["wasIn"] and not isInside)
	npcs[npcID]["trigger"]["wasIn"] = isInside
	local dID = npcs[npcID]["trigger"]["dialog"]
	if(dialog_open)then
	 if(#npcs[npcID]["dialogs"][dID]["functions"]>#npcs[npcID]["dialogs"][dID]["answers"])then
	  TriggerFunction(npcID,dID,#npcs[npcID]["dialogs"][dID]["functions"])
	 end
	end
   end
  end
  
  while (dialogID<=#npcs[npcID]["dialogs"] and dialog_open) do
   if(npcs[npcID]["dialogs"][dialogID]["enabled"])then
    if(npcs[npcID]["dialogs"][dialogID]["ODID"]==nil)then
     npcs[npcID]["dialogs"][dialogID]["ODID"] = (#open_dialog_id+1)
	 -- Insert dialog UUID to open_dialog_id
	  print_log("dialog","# Added Dialog "..dialogID..",UUID:"..npcs[npcID]["dialogs"][dialogID]["id"]..",ODID:"..npcs[npcID]["dialogs"][dialogID]["ODID"].." to open dialogs")
	 table.insert(open_dialog_id,npcs[npcID]["dialogs"][dialogID]["id"])
	end
    print_log("dialog","* Started Dialog "..dialogID..",UUID:"..npcs[npcID]["dialogs"][dialogID]["id"]..",ODID:"..npcs[npcID]["dialogs"][dialogID]["ODID"].." with \""..npcs[npcID]["name"].."\" ("..npcID..") and text: \""..npcs[npcID]["dialogs"][dialogID]["text"].."\"")

	local json = '{"text":" ","color":"white","bold":"false","extra":[{"text":"'..npcs[npcID]["name"]..': ","bold":"true","color":"'..npcs[npcID]["color"]..'"},'..npcs[npcID]["dialogs"][dialogID]["text"]
	math.randomseed(npcID)
	for a=1,#npcs[npcID]["dialogs"][dialogID]["answers"] do
	 local color = "white"
	 while color==npcs[npcID]["color"] or color == "white" do
	  color = chat_colors[math.random(#chat_colors)]
	 end
	 json = json..',{"text":" ['..npcs[npcID]["dialogs"][dialogID]["answers"][a]..']","color":"'..color..'","clickEvent":{"action":"run_command","value":"/scoreboard players set '..npcs[npcID]["dialogs"][dialogID]["ODID"]..' dc_dialog '..a..'"}}'
	end
    --print("* Started Dialog "..dialogID..",UUID:"..getUUIDOfDialog(npcID,dialogID)..",ODID:"..npcs[npcID]["dialogs"][dialogID]["ODID"].." with \""..npcs[npcID]["name"].."\" ("..npcID..")")
	ezCmd('/tellraw @a '..json..']}',0,true)
	npcs[npcID]["dialogs"][dialogID]["enabled"] = false
	npcs[npcID]["dialogs"][dialogID]["showed"] = true
   end
   dialogID = dialogID + 1
  end
 end
end

function enableDialog(a)

end

function TriggerFunction(_npcID,_dID,_aID)
 local f = npcs[_npcID]["dialogs"][_dID]["functions"][_aID]
 if(type(f)=="table")then
  if(#f==2)then
   _G[f[1]](f[2])
  elseif(#f>2)then
   local arguments = {unpack(f)}
   local function_name = f[1]
   table.remove(arguments,1)
   _G[function_name](unpack(arguments))
  else
   _G[f[1]]()
  end
 else
  functions[f]()
 end
end

function getUUIDOfDialog(_npcID,_dID) return npcs[_npcID]["dialogs"][_dID]["id"] end
function enableDialog(_npcID,_dID) npcs[_npcID]["dialogs"][_dID]["enabled"] = true end
function disableDialog(_npcID,_dID) npcs[_npcID]["dialogs"][_dID]["enabled"] = false end

-- newDialogForNPC(npcID,[NBT Tags],_functions,_reputationdifferenz)

function newDialogForNPC(_npcID,_text,_answers,_functions)
 local arr = {["text"] = _text,["answers"] = _answers,["functions"] = _functions,["enabled"] = false,["answered"] = false,["showed"] = false}
 table.insert(dialogdata,{["npc"] = _npcID,["dialog"] = (#npcs[_npcID]["dialogs"]+1)})
 arr["id"] = #dialogdata
 table.insert(npcs[_npcID]["dialogs"],arr)
 
 print_log("dialog","+ Created Dialog for \""..npcs[_npcID]["name"].."\" (".._npcID..") with UUID "..arr["id"].." and inNPCID "..(#npcs[_npcID]["dialogs"]))
 
 return #npcs[_npcID]["dialogs"]
end

function newNPCDialogTrigger(_npcID,_dID,_trigger)
 local trigger_array = {}
 if(_trigger~=nil)then
  if(type(_trigger)=="table")then
   if(_trigger["t"]~=nil)then
    if(_trigger["t"]=="range" or _trigger["t"]=="isInArea")then
	 trigger_array = {["t"] = "range",["o"] = "isIn",["range"] = (_trigger["r"] or 3)}
	elseif(_trigger["t"]=="entryArea")then
	 trigger_array = {["t"] = "range",["o"] = "gotIn",["range"] = (_trigger["r"] or 3),["wasIn"] = (npcs[_npcID]["trigger"]["wasIn"] or false)}
	elseif(_trigger["t"]=="leaveArea")then
	 trigger_array = {["t"] = "range",["o"] = "gotOut",["range"] = (_trigger["r"] or 3),["wasIn"] = (npcs[_npcID]["trigger"]["wasIn"] or false)}
	elseif(_trigger["t"]=="item")then
	 if(type(_trigger["id"])=="number")then
	  if((tonumber(_trigger["id"]) or 0) > 0)then
	   trigger_array = {["t"] = "item",["id"] = _trigger["id"]}
	   if(_trigger["damage"]~=nil)then trigger_array["damage"] = _trigger["damage"] end
	   if(_trigger["name"]~=nil)then trigger_array["name"] = _trigger["name"] end
	  else
	   if(tonumber(_trigger["id"]) == 0)then
	    trigger_array = {["t"] = "tookItem"}
	   end
	  end
	 end
	end
   end
  elseif(type(_trigger)=="number")then
   trigger_array = {["t"] = "range",["o"] = "isIn",["range"] = _trigger}
  elseif(_trigger=="range")then
   trigger_array = {["t"] = "range",["o"] = "isIn",["range"] = 3}
  elseif(_trigger=="tookItem")then
   trigger_array = {["t"] = "tookItem"}
  elseif(_trigger=="gaveItem")then
   trigger_array = {["t"] = "gaveItem"}
  elseif(_trigger=="switchedItem")then
   trigger_array = {["t"] = "switchedItem"}
  end
 end
 if(trigger_array["t"]==nil)then trigger_array = {["t"] = "range",["o"] = "isIn",["range"] = 3} end
 trigger_array["dialog"] = _dID
 print_log("dialog"," + New Trigger of type "..trigger_array["t"].." for (UUID:"..getUUIDOfDialog(_npcID,_dID).."/DID:".._dID..") for \""..npcs[_npcID]["name"].."\" (".._npcID..")")
 npcs[_npcID]["trigger"] = trigger_array
end

function npcSetName(_id,_name) npcs[_id]["name"] = _name or "" end
function npcSetColor(_id,_color) npcs[_id]["color"] = _color or "blue" end


function newNPC(_name,_color,_x,_y,_z) -- Returns ID of created NPC
 local npcData = {}
 npcData.repuation = 0 -- How much that NPC likes you
 npcData.dialogs = {} --{text,{answers},{functions},{reputationdifferenz},enabled}
 npcData.name = _name or ""
 npcData.color = _color or "blue"
 npcData.trigger = {} --{["t"]=type,}
 npcData.itemOnTable = false
 npcData.itemTableCoords = {} 
 npcData["x"] = _x
 npcData["y"] = _y
 npcData["z"] = _z
 table.insert(npcs,npcData)
 return #npcs -- Return ID of that just created npc
end


local Carl = {["npcID"] = newNPC("Carl","green",-14,23,0)}
local Carl2 = {["npcID"] = newNPC("Carl","green",-14,23,0)}

local progress = 1

-- So _G dont get spammed
functions = {}
functions["talkToCarl"] = function()
 local d = newDialogForNPC(
  Carl.npcID,
  '{"text":"So how are you doing in this magical world?"}',
  {'Great, could use something to do though!','I don\'t know, running around and looking for loot.'},
  {"getQuestFromCarl","getLootFromCarl"}
 )
 
 enableDialog(Carl.npcID,d)
 newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["getLootFromCarl"] = function()
 local d = newDialogForNPC(
  Carl.npcID,
  '{"text":"Some loot is what you want? Here is a chest full of loot for you! But only if you do a job for me! Do you accept?"}',
  {'Yes!', 'No.'},
  {"startQuestSkeleton", "declineJob"}
  )
 enableDialog(Carl.npcID,d)
 newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["getQuestFromCarl"] = function()
 local d = newDialogForNPC(
  Carl.npcID,
  '"Oooh, seeking for some quests? Do you want one?"',
  {'Yes!', 'No.'},
  {"startQuestSkeleton", "declineJob"}
 )
 enableDialog(Carl.npcID,d)
 newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["startQuestSkeleton"] = function()
 local d = newDialogForNPC(
  Carl.npcID,
  '"Bring me 2 stacks of bones please."',
  {'I already have them!', 'Goodbye!'},
  {"finishQuest", "null"}
 )
 enableDialog(Carl.npcID,d)
 newNPCDialogTrigger(Carl.npcID,d,5)
 Carl.gaveQuest = true
end
functions["helloCarl"] = function()
 if Carl.isDone then
	Carl.greetings = newDialogForNPC(Carl.npcID, '"Sorry, but I\'m out of treasure for you. Thanks, though!"', {}, {}) 
 elseif Carl.gaveQuest then
	Carl.greetings = newDialogForNPC(Carl.npcID, '"Hey, welcome back! Do you have enough bones?"', {'Yeah!', 'Nope.'}, {"finishQuest", "returnNotDone"})
 elseif(Carl.greetings==nil)then
  Carl.greetings = newDialogForNPC(Carl.npcID,'{"text":"Hey you; wanna talk?"}',{'Sure!','No.'},{"talkToCarl","null"})
 else
  npcs[Carl.npcID]["dialogs"][Carl.greetings]["text"] = '{"text":"Nice to see you again! Wanna talk now?"}'
  npcs[Carl.npcID]["dialogs"][Carl.greetings]["answered"] = false
 end
 enableDialog(Carl.npcID,Carl.greetings)
 newNPCDialogTrigger(Carl.npcID,Carl.greetings,{["t"] = "isInArea",["r"] = 5})
end
functions["declineJob"] = function()
	local d = newDialogForNPC(
		Carl.npcID,
		'"Alright, that\'s fine!"',
		{},
		{}
	)
	enableDialog(Carl.npcID,d)
	newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["finishQuest"] = function()
	rednet.open("top")
	local d = newDialogForNPC(
		Carl.npcID,
		'"Great! Tell me when you\'re ready, place them in my servant turtle and press any key. He\'ll check them for me."',
		{'Ready!'},
		{'waitForVerify'}
	)
	enableDialog(Carl.npcID,d)
	newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["waitForVerify"] = function()
	local id, message = rednet.receive()
	if message == "suc" then
		functions["sucQuest"]()
	else
		functions["failQuest"]()
	end
end
functions["sucQuest"] = function()
	local d = newDialogForNPC(
		Carl.npcID,
		'"Thanks! Here\'s your reward."',
		{},
		{}
	)
	enableDialog(Carl.npcID,d)
	newNPCDialogTrigger(Carl.npcID,d,5)
	math.randomseed(os.time())
	shell.run("dungeon/chest -13 23 0 " .. math.random(1,200))
	Carl.gaveQuest = nil
	Carl.isDone = true
end
functions["failQuest"] = function()
	local d = newDialogForNPC(
		Carl.npcID,
		'"I need 2 stacks of bones, that\'s not enough!"',
		{},
		{}
	)
	enableDialog(Carl.npcID,d)
	newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["returnNotDone"] = function()
	local d = newDialogForNPC(
		Carl.npcID,
		'"Alright, I\'ll wait."',
		{},
		{}
	)
	enableDialog(Carl.npcID,d)
	newNPCDialogTrigger(Carl.npcID,d,5)
end
functions["byeCarl"] = function()
 if(Carl2.bye==nil)then
  Carl2.bye = newDialogForNPC(Carl2.npcID,'{"text":"See you soon!"}',{},{"byeCarl"})
 else
  npcs[Carl2.npcID]["dialogs"][Carl2.bye]["answered"] = false
 end
 enableDialog(Carl2.npcID,Carl2.bye)
 newNPCDialogTrigger(Carl2.npcID,Carl2.bye,{["t"] = "leaveArea",["r"] = 5})
 functions["helloCarl"]()
end

functions["null"] = function() end

print("Functions loaded")
print("Resetting")

local i = 1
while ezCmd("/scoreboard players list "..i.."",1) or ezCmd("/scoreboard players list "..(i+1).."",1) do
 ezCmd("/scoreboard players reset "..i.."")
 i = i + 1
end


print("Loading Data")

functions["byeCarl"]()

print("Running")

while true do
 dialogCheckForStart()
 --TriggerFunction(Carl.npcID,Carl.greetings,2)
 dialogCheckForDialogAnswers()
 sleep(.5)
end
